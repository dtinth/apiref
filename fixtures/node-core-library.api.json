{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.19.2",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "@rushstack/node-core-library!",
  "docComment": "/**\n * Core libraries that every NodeJS toolchain project should use.\n *\n * @packageDocumentation\n */\n",
  "name": "@rushstack/node-core-library",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@rushstack/node-core-library!",
      "name": "",
      "members": [
        {
          "kind": "Enum",
          "canonicalReference": "@rushstack/node-core-library!AlreadyExistsBehavior:enum",
          "docComment": "/**\n * Specifies the behavior of APIs such as {@link FileSystem.copyFile} or {@link FileSystem.createSymbolicLinkFile} when the output file path already exists.\n *\n * @remarks\n *\n * For {@link FileSystem.copyFile} and related APIs, the \"output file path\" is {@link IFileSystemCopyFileOptions.destinationPath}.\n *\n * For {@link FileSystem.createSymbolicLinkFile} and related APIs, the \"output file path\" is {@link IFileSystemCreateLinkOptions.newLinkPath}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum AlreadyExistsBehavior "
            }
          ],
          "releaseTag": "Public",
          "name": "AlreadyExistsBehavior",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!AlreadyExistsBehavior.Error:member",
              "docComment": "/**\n * If the output file path already exists, the operation will fail, and an error will be reported.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Error = "
                },
                {
                  "kind": "Content",
                  "text": "\"error\""
                }
              ],
              "releaseTag": "Public",
              "name": "Error",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!AlreadyExistsBehavior.Ignore:member",
              "docComment": "/**\n * If the output file path already exists, skip this item, and continue the operation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Ignore = "
                },
                {
                  "kind": "Content",
                  "text": "\"ignore\""
                }
              ],
              "releaseTag": "Public",
              "name": "Ignore",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!AlreadyExistsBehavior.Overwrite:member",
              "docComment": "/**\n * If the output file path already exists, try to overwrite the existing object.\n *\n * @remarks\n *\n * If overwriting the object would require recursively deleting a folder tree, then the operation will fail. As an example, suppose {@link FileSystem.copyFile} is copying a single file `/a/b/c` to the destination path `/d/e`, and `/d/e` is a nonempty folder. In this situation, an error will be reported; specifying `AlreadyExistsBehavior.Overwrite` does not help. Empty folders can be overwritten depending on the details of the implementation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Overwrite = "
                },
                {
                  "kind": "Content",
                  "text": "\"overwrite\""
                }
              ],
              "releaseTag": "Public",
              "name": "Overwrite",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!AlreadyReportedError:class",
          "docComment": "/**\n * This exception can be thrown to indicate that an operation failed and an error message has already been reported appropriately. Thus, the catch handler does not have responsibility for reporting the error.\n *\n * @remarks\n *\n * For example, suppose a tool writes interactive output to `console.log()`. When an exception is thrown, the `catch` handler will typically provide simplistic reporting such as this:\n * ```ts\n * catch (error) {\n *   console.log(\"ERROR: \" + error.message);\n * }\n * ```\n *\n * Suppose that the code performing the operation normally prints rich output to the console. It may be able to present an error message more nicely (for example, as part of a table, or structured log format). Throwing `AlreadyReportedError` provides a way to use exception handling to abort the operation, but instruct the `catch` handler not to print an error a second time:\n * ```ts\n * catch (error) {\n *   if (error instanceof AlreadyReportedError) {\n *     return;\n *   }\n *   console.log(\"ERROR: \" + error.message);\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AlreadyReportedError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "AlreadyReportedError",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!AlreadyReportedError.[Symbol.hasInstance]:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static ["
                },
                {
                  "kind": "Reference",
                  "text": "Symbol.hasInstance",
                  "canonicalReference": "!SymbolConstructor#hasInstance"
                },
                {
                  "kind": "Content",
                  "text": "](instance: "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "instance",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "[Symbol.hasInstance]"
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@rushstack/node-core-library!AlreadyReportedError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `AlreadyReportedError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!AnsiEscape:class",
          "docComment": "/**\n * Operations for working with text strings that contain {@link https://en.wikipedia.org/wiki/ANSI_escape_code | ANSI escape codes}. The most commonly used escape codes set the foreground/background color for console output.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AnsiEscape "
            }
          ],
          "releaseTag": "Public",
          "name": "AnsiEscape",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!AnsiEscape.formatForTests:member(1)",
              "docComment": "/**\n * Replaces ANSI escape codes with human-readable tokens. This is useful for unit tests that compare text strings in test assertions or snapshot files.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static formatForTests(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IAnsiEscapeConvertForTestsOptions",
                  "canonicalReference": "@rushstack/node-core-library!IAnsiEscapeConvertForTestsOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "formatForTests"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!AnsiEscape.removeCodes:member(1)",
              "docComment": "/**\n * Returns the input text with all ANSI escape codes removed. For example, this is useful when saving colorized console output to a log file.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static removeCodes(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeCodes"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!Async:class",
          "docComment": "/**\n * Utilities for parallel asynchronous operations, for use with the system `Promise` APIs.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Async "
            }
          ],
          "releaseTag": "Beta",
          "name": "Async",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Async.forEachAsync:member(1)",
              "docComment": "/**\n * Given an input array and a `callback` function, invoke the callback to start a promise for each element in the array.\n *\n * @remarks\n *\n * This API is similar to the system `Array#forEach`, except that the loop is asynchronous, and the maximum number of concurrent promises can be throttled using {@link IAsyncParallelismOptions.concurrency}.\n *\n * If `callback` throws a synchronous exception, or if it returns a promise that rejects, then the loop stops immediately. Any remaining array items will be skipped, and overall operation will reject with the first error that was encountered.\n *\n * @param iterable - the array of inputs for the callback function\n *\n * @param callback - a function that starts an asynchronous promise for an element from the array\n *\n * @param options - options for customizing the control flow\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static forEachAsync<TEntry>(iterable: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TEntry> | "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterable",
                  "canonicalReference": "!AsyncIterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TEntry>"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Content",
                  "text": "(entry: TEntry, arrayIndex: number) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IAsyncParallelismOptions",
                  "canonicalReference": "@rushstack/node-core-library!IAsyncParallelismOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "iterable",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 12
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TEntry",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "forEachAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Async.mapAsync:member(1)",
              "docComment": "/**\n * Given an input array and a `callback` function, invoke the callback to start a promise for each element in the array. Returns an array containing the results.\n *\n * @remarks\n *\n * This API is similar to the system `Array#map`, except that the loop is asynchronous, and the maximum number of concurrent promises can be throttled using {@link IAsyncParallelismOptions.concurrency}.\n *\n * If `callback` throws a synchronous exception, or if it returns a promise that rejects, then the loop stops immediately. Any remaining array items will be skipped, and overall operation will reject with the first error that was encountered.\n *\n * @param iterable - the array of inputs for the callback function\n *\n * @param callback - a function that starts an asynchronous promise for an element from the array\n *\n * @param options - options for customizing the control flow\n *\n * @returns an array containing the result for each callback, in the same order as the original input `array`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static mapAsync<TEntry, TRetVal>(iterable: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TEntry> | "
                },
                {
                  "kind": "Reference",
                  "text": "AsyncIterable",
                  "canonicalReference": "!AsyncIterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TEntry>"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Content",
                  "text": "(entry: TEntry, arrayIndex: number) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TRetVal>"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IAsyncParallelismOptions",
                  "canonicalReference": "@rushstack/node-core-library!IAsyncParallelismOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TRetVal[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "iterable",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 12
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TEntry",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TRetVal",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "mapAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Async.sleep:member(1)",
              "docComment": "/**\n * Return a promise that resolves after the specified number of milliseconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static sleep(ms: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ms",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "sleep"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rushstack/node-core-library!Brand:type",
          "docComment": "/**\n * A \"branded type\" is a primitive type with a compile-type key that makes it incompatible with other aliases for the primitive type.\n *\n * @remarks\n *\n * Example usage:\n * ```ts\n * // PhoneNumber is a branded type based on the \"string\" primitive.\n * type PhoneNumber = Brand<string, 'PhoneNumber'>;\n *\n * function createPhoneNumber(input: string): PhoneNumber {\n *   if (!/\\d+(\\-\\d+)+/.test(input)) {\n *     throw new Error('Invalid phone number: ' + JSON.stringify(input));\n *   }\n *   return input as PhoneNumber;\n * }\n *\n * const p1: PhoneNumber = createPhoneNumber('123-456-7890');\n *\n * // PhoneNumber is a string and can be used as one:\n * const p2: string = p1;\n *\n * // But an arbitrary string cannot be implicitly type cast as PhoneNumber.\n * // ERROR: Type 'string' is not assignable to type 'PhoneNumber'\n * const p3: PhoneNumber = '123-456-7890';\n * ```\n *\n * For more information about this pattern, see {@link https://github.com/Microsoft/TypeScript/blob/7b48a182c05ea4dea81bab73ecbbe9e013a79e99/src/compiler/types.ts#L693-L698 | this comment} explaining the TypeScript compiler's introduction of this pattern, and {@link https://spin.atomicobject.com/2018/01/15/typescript-flexible-nominal-typing/ | this article} explaining the technique in depth.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Brand<T, BrandTag extends "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T & {\n    __brand: BrandTag;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Brand",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "BrandTag",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!Colors:class",
          "docComment": "/**\n * The static functions on this class are used to produce colored text for use with the node-core-library terminal.\n *\n * @example\n *\n * terminal.writeLine(Colors.green('Green Text!'), ' ', Colors.blue('Blue Text!'));\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Colors "
            }
          ],
          "releaseTag": "Beta",
          "name": "Colors",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.black:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static black(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "black"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.blackBackground:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static blackBackground(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "blackBackground"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.blink:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static blink(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "blink"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.blue:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static blue(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "blue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.blueBackground:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static blueBackground(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "blueBackground"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.bold:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static bold(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "bold"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.cyan:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static cyan(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "cyan"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.cyanBackground:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static cyanBackground(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "cyanBackground"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.dim:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static dim(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "dim"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.gray:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static gray(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "gray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.grayBackground:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static grayBackground(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "grayBackground"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.green:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static green(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "green"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.greenBackground:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static greenBackground(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "greenBackground"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.hidden:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static hidden(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "hidden"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.invertColor:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static invertColor(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "invertColor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.magenta:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static magenta(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "magenta"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.magentaBackground:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static magentaBackground(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "magentaBackground"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.red:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static red(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "red"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.redBackground:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static redBackground(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "redBackground"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.underline:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static underline(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "underline"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.white:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static white(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "white"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.whiteBackground:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static whiteBackground(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "whiteBackground"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.yellow:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static yellow(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "yellow"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Colors.yellowBackground:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static yellowBackground(text: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "yellowBackground"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@rushstack/node-core-library!ColorValue:enum",
          "docComment": "/**\n * Colors used with {@link IColorableSequence}.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ColorValue "
            }
          ],
          "releaseTag": "Beta",
          "name": "ColorValue",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!ColorValue.Black:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Black = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Beta",
              "name": "Black",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!ColorValue.Blue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Blue = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Beta",
              "name": "Blue",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!ColorValue.Cyan:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Cyan = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "releaseTag": "Beta",
              "name": "Cyan",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!ColorValue.Gray:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Gray = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "releaseTag": "Beta",
              "name": "Gray",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!ColorValue.Green:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Green = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Beta",
              "name": "Green",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!ColorValue.Magenta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Magenta = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Beta",
              "name": "Magenta",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!ColorValue.Red:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Red = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Beta",
              "name": "Red",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!ColorValue.White:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "White = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "releaseTag": "Beta",
              "name": "White",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!ColorValue.Yellow:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Yellow = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Beta",
              "name": "Yellow",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!ConsoleTerminalProvider:class",
          "docComment": "/**\n * Terminal provider that prints to STDOUT (for log- and verbose-level messages) and STDERR (for warning- and error-level messsages).\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ConsoleTerminalProvider implements "
            },
            {
              "kind": "Reference",
              "text": "ITerminalProvider",
              "canonicalReference": "@rushstack/node-core-library!ITerminalProvider:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Beta",
          "name": "ConsoleTerminalProvider",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@rushstack/node-core-library!ConsoleTerminalProvider:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ConsoleTerminalProvider` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IConsoleTerminalProviderOptions",
                  "canonicalReference": "@rushstack/node-core-library!IConsoleTerminalProviderOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!ConsoleTerminalProvider#debugEnabled:member",
              "docComment": "/**\n * If true, debug-level messages should be written to the console.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debugEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "debugEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!ConsoleTerminalProvider#eolCharacter:member",
              "docComment": "/**\n * This property should return the newline character the terminal provider expects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get eolCharacter(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "eolCharacter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!ConsoleTerminalProvider#supportsColor:member",
              "docComment": "/**\n * This property should return true only if the terminal provider supports rendering console colors.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get supportsColor(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "supportsColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!ConsoleTerminalProvider#verboseEnabled:member",
              "docComment": "/**\n * If true, verbose-level messages should be written to the console.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "verboseEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "verboseEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!ConsoleTerminalProvider#write:member(1)",
              "docComment": "/**\n * This function gets called on every terminal provider upon every message function call on the terminal instance.\n *\n * @param data - The terminal message.\n *\n * @param severity - The message severity. Terminal providers can route different kinds of messages to different streams and may choose to ignore verbose or debug messages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "write(data: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", severity: "
                },
                {
                  "kind": "Reference",
                  "text": "TerminalProviderSeverity",
                  "canonicalReference": "@rushstack/node-core-library!TerminalProviderSeverity:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "severity",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "write"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@rushstack/node-core-library!Encoding:enum",
          "docComment": "/**\n * The allowed types of encodings, as supported by Node.js\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum Encoding "
            }
          ],
          "releaseTag": "Public",
          "name": "Encoding",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!Encoding.Utf8:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Utf8 = "
                },
                {
                  "kind": "Content",
                  "text": "\"utf8\""
                }
              ],
              "releaseTag": "Public",
              "name": "Utf8",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!Enum:class",
          "docComment": "/**\n * A helper for looking up TypeScript `enum` keys/values.\n *\n * @remarks\n *\n * TypeScript enums implement a lookup table for mapping between their keys and values:\n * ```ts\n * enum Colors {\n *   Red = 1\n * }\n *\n * // Prints \"Red\"\n * console.log(Colors[1]);\n *\n * // Prints \"1\"\n * console.log(Colors[\"Red]);\n * ```\n *\n * However the compiler's \"noImplicitAny\" validation has trouble with these mappings, because there are so many possible types for the map elements:\n * ```ts\n * function f(s: string): Colors | undefined {\n *   // (TS 7015) Element implicitly has an 'any' type because\n *   // index expression is not of type 'number'.\n *   return Colors[s];\n * }\n * ```\n *\n * The `Enum` helper provides a more specific, strongly typed way to access members:\n * ```ts\n * function f(s: string): Colors | undefined {\n *   return Enum.tryGetValueByKey(Colors, s);\n * }\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Enum "
            }
          ],
          "releaseTag": "Public",
          "name": "Enum",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Enum.getKeyByNumber:member(1)",
              "docComment": "/**\n * This API is similar to {@link Enum.tryGetKeyByNumber}, except that it throws an exception if the key is undefined.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getKeyByNumber<TEnumValue, TEnumObject extends "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: TEnumValue;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ">(enumObject: "
                },
                {
                  "kind": "Content",
                  "text": "TEnumObject"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "keyof typeof "
                },
                {
                  "kind": "Reference",
                  "text": "enumObject",
                  "canonicalReference": "@rushstack/node-core-library!~enumObject:var"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enumObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TEnumValue",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TEnumObject",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "getKeyByNumber"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Enum.getValueByKey:member(1)",
              "docComment": "/**\n * This API is similar to {@link Enum.tryGetValueByKey}, except that it throws an exception if the key is undefined.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getValueByKey<TEnumValue>(enumObject: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: TEnumValue | string;\n        [key: number]: TEnumValue | string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ", key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "TEnumValue"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enumObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TEnumValue",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "getValueByKey"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Enum.tryGetKeyByNumber:member(1)",
              "docComment": "/**\n * Returns an enum string key, given its numeric value. Returns `undefined` if no matching value is found.\n *\n * @remarks\n *\n * The TypeScript compiler only creates a reverse mapping for enum members whose value is numeric. For example:\n * ```ts\n * enum E {\n *   A = 1,\n *   B = 'c'\n * }\n *\n * // Prints \"A\"\n * console.log(E[1]);\n *\n * // Prints \"undefined\"\n * console.log(E[\"c\"]);\n * ```\n *\n * @example\n *\n * Example usage:\n * ```ts\n * enum Colors {\n *   Red = 1,\n *   Blue = 'blue'\n * }\n *\n * // Prints \"Red\"\n * console.log(Enum.tryGetKeyByNumber(Colors, 1));\n *\n * // Prints \"undefined\"\n * console.log(Enum.tryGetKeyByNumber(Colors, -1));\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static tryGetKeyByNumber<TEnumValue, TEnumObject extends "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: TEnumValue;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ">(enumObject: "
                },
                {
                  "kind": "Content",
                  "text": "TEnumObject"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "keyof typeof "
                },
                {
                  "kind": "Reference",
                  "text": "enumObject",
                  "canonicalReference": "@rushstack/node-core-library!~enumObject:var"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enumObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TEnumValue",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TEnumObject",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "tryGetKeyByNumber"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Enum.tryGetValueByKey:member(1)",
              "docComment": "/**\n * Returns an enum value, given its key. Returns `undefined` if no matching key is found.\n *\n * @example\n *\n * Example usage:\n * ```ts\n * enum Colors {\n *   Red = 1\n * }\n *\n * // Prints \"1\"\n * console.log(Enum.tryGetValueByKey(Colors, \"Red\"));\n *\n * // Prints \"undefined\"\n * console.log(Enum.tryGetValueByKey(Colors, \"Black\"));\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static tryGetValueByKey<TEnumValue>(enumObject: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: TEnumValue | string;\n        [key: number]: TEnumValue | string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ", key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "TEnumValue | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enumObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TEnumValue",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "tryGetValueByKey"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!EnvironmentMap:class",
          "docComment": "/**\n * A map data structure that stores process environment variables. On Windows operating system, the variable names are case-insensitive.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class EnvironmentMap "
            }
          ],
          "releaseTag": "Public",
          "name": "EnvironmentMap",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@rushstack/node-core-library!EnvironmentMap:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `EnvironmentMap` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(environmentObject?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "environmentObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!EnvironmentMap#caseSensitive:member",
              "docComment": "/**\n * Whether the environment variable names are case-sensitive.\n *\n * @remarks\n *\n * On Windows operating system, environment variables are case-insensitive. The map will preserve the variable name casing from the most recent assignment operation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly caseSensitive: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "caseSensitive",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!EnvironmentMap#clear:member(1)",
              "docComment": "/**\n * Clears all entries, resulting in an empty map.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!EnvironmentMap#entries:member(1)",
              "docComment": "/**\n * Returns the map entries.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "entries(): "
                },
                {
                  "kind": "Reference",
                  "text": "IterableIterator",
                  "canonicalReference": "!IterableIterator:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IEnvironmentEntry",
                  "canonicalReference": "@rushstack/node-core-library!IEnvironmentEntry:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "entries"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!EnvironmentMap#get:member(1)",
              "docComment": "/**\n * Returns the value of the specified variable, or `undefined` if the map does not contain that name.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!EnvironmentMap#mergeFrom:member(1)",
              "docComment": "/**\n * Adds each entry from `environmentMap` to this map.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mergeFrom(environmentMap: "
                },
                {
                  "kind": "Reference",
                  "text": "EnvironmentMap",
                  "canonicalReference": "@rushstack/node-core-library!EnvironmentMap:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "environmentMap",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "mergeFrom"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!EnvironmentMap#mergeFromObject:member(1)",
              "docComment": "/**\n * Merges entries from a plain JavaScript object, such as would be used with the `process.env` API.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mergeFromObject(environmentObject?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string | undefined>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "environmentObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "mergeFromObject"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!EnvironmentMap#names:member(1)",
              "docComment": "/**\n * Returns the map keys, which are environment variable names.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "names(): "
                },
                {
                  "kind": "Reference",
                  "text": "IterableIterator",
                  "canonicalReference": "!IterableIterator:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "names"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!EnvironmentMap#set:member(1)",
              "docComment": "/**\n * Assigns the variable to the specified value. A previous value will be overwritten.\n *\n * @remarks\n *\n * The value can be an empty string. To completely remove the entry, use {@link EnvironmentMap.unset} instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!EnvironmentMap#toObject:member(1)",
              "docComment": "/**\n * Returns the keys as a plain JavaScript object similar to the object returned by the `process.env` API.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toObject(): "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toObject"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!EnvironmentMap#unset:member(1)",
              "docComment": "/**\n * Removes the key from the map, if present.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unset(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "unset"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!Executable:class",
          "docComment": "/**\n * The Executable class provides a safe, portable, recommended solution for tools that need to launch child processes.\n *\n * @remarks\n *\n * The NodeJS child_process API provides a solution for launching child processes, however its design encourages reliance on the operating system shell for certain features. Invoking the OS shell is not safe, not portable, and generally not recommended:\n *\n * - Different shells have different behavior and command-line syntax, and which shell you will get with NodeJS is unpredictable. There is no universal shell guaranteed to be available on all platforms.\n *\n * - If a command parameter contains symbol characters, a shell may interpret them, which can introduce a security vulnerability\n *\n * - Each shell has different rules for escaping these symbols. On Windows, the default shell is incapable of escaping certain character sequences.\n *\n * The Executable API provides a pure JavaScript implementation of primitive shell-like functionality for searching the default PATH, appending default file extensions on Windows, and executing a file that may contain a POSIX shebang. This primitive functionality is sufficient (and recommended) for most tooling scenarios.\n *\n * If you need additional shell features such as wildcard globbing, environment variable expansion, piping, or built-in commands, then we recommend to use the `@microsoft/rushell` library instead. Rushell is a pure JavaScript shell with a standard syntax that is guaranteed to work consistently across all platforms.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Executable "
            }
          ],
          "releaseTag": "Public",
          "name": "Executable",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Executable.spawn:member(1)",
              "docComment": "/**\n * Start a child process.\n *\n * @remarks\n *\n * This function is similar to child_process.spawn(). The main differences are:\n *\n * - It does not invoke the OS shell unless the executable file is a shell script. - Command-line arguments containing special characters are more accurately passed through to the child process. - If the filename is missing a path, then the shell's default PATH will be searched. - If the filename is missing a file extension, then Windows default file extensions will be searched.\n *\n * This command is asynchronous, but it does not return a `Promise`. Instead it returns a Node.js `ChildProcess` supporting event notifications.\n *\n * @param filename - The name of the executable file. This string must not contain any command-line arguments. If the name contains any path delimiters, then the shell's default PATH will not be searched.\n *\n * @param args - The command-line arguments to be passed to the process.\n *\n * @param options - Additional options\n *\n * @returns the same data type as returned by the NodeJS child_process.spawnSync() API\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static spawn(filename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", args: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IExecutableSpawnOptions",
                  "canonicalReference": "@rushstack/node-core-library!IExecutableSpawnOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "child_process.ChildProcess",
                  "canonicalReference": "!\"\\\"child_process\\\"\".ChildProcess:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "spawn"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Executable.spawnSync:member(1)",
              "docComment": "/**\n * Synchronously create a child process and optionally capture its output.\n *\n * @remarks\n *\n * This function is similar to child_process.spawnSync(). The main differences are:\n *\n * - It does not invoke the OS shell unless the executable file is a shell script. - Command-line arguments containing special characters are more accurately passed through to the child process. - If the filename is missing a path, then the shell's default PATH will be searched. - If the filename is missing a file extension, then Windows default file extensions will be searched.\n *\n * @param filename - The name of the executable file. This string must not contain any command-line arguments. If the name contains any path delimiters, then the shell's default PATH will not be searched.\n *\n * @param args - The command-line arguments to be passed to the process.\n *\n * @param options - Additional options\n *\n * @returns the same data type as returned by the NodeJS child_process.spawnSync() API\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static spawnSync(filename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", args: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IExecutableSpawnSyncOptions",
                  "canonicalReference": "@rushstack/node-core-library!IExecutableSpawnSyncOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "child_process.SpawnSyncReturns",
                  "canonicalReference": "!\"\\\"child_process\\\"\".SpawnSyncReturns:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "spawnSync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Executable.tryResolve:member(1)",
              "docComment": "/**\n * Given a filename, this determines the absolute path of the executable file that would be executed by a shell:\n *\n * - If the filename is missing a path, then the shell's default PATH will be searched. - If the filename is missing a file extension, then Windows default file extensions will be searched.\n *\n * @remarks\n *\n * @param filename - The name of the executable file. This string must not contain any command-line arguments. If the name contains any path delimiters, then the shell's default PATH will not be searched.\n *\n * @param options - optional other parameters\n *\n * @returns the absolute path of the executable, or undefined if it was not found\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static tryResolve(filename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IExecutableResolveOptions",
                  "canonicalReference": "@rushstack/node-core-library!IExecutableResolveOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "tryResolve"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rushstack/node-core-library!ExecutableStdioMapping:type",
          "docComment": "/**\n * Types for {@link IExecutableSpawnSyncOptions.stdio} and {@link IExecutableSpawnOptions.stdio}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ExecutableStdioMapping = "
            },
            {
              "kind": "Content",
              "text": "'pipe' | 'ignore' | 'inherit' | "
            },
            {
              "kind": "Reference",
              "text": "ExecutableStdioStreamMapping",
              "canonicalReference": "@rushstack/node-core-library!ExecutableStdioStreamMapping:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ExecutableStdioMapping",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rushstack/node-core-library!ExecutableStdioStreamMapping:type",
          "docComment": "/**\n * Typings for one of the streams inside IExecutableSpawnSyncOptions.stdio.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ExecutableStdioStreamMapping = "
            },
            {
              "kind": "Content",
              "text": "'pipe' | 'ignore' | 'inherit' | "
            },
            {
              "kind": "Reference",
              "text": "NodeJS.WritableStream",
              "canonicalReference": "!NodeJS.WritableStream:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "NodeJS.ReadableStream",
              "canonicalReference": "!NodeJS.ReadableStream:interface"
            },
            {
              "kind": "Content",
              "text": " | number | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ExecutableStdioStreamMapping",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@rushstack/node-core-library!FileConstants:enum",
          "docComment": "/**\n * String constants for common filenames and parts of filenames.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum FileConstants "
            }
          ],
          "releaseTag": "Public",
          "name": "FileConstants",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!FileConstants.PackageJson:member",
              "docComment": "/**\n * \"package.json\" - the configuration file that defines an NPM package\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PackageJson = "
                },
                {
                  "kind": "Content",
                  "text": "\"package.json\""
                }
              ],
              "releaseTag": "Public",
              "name": "PackageJson",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!FileSystem:class",
          "docComment": "/**\n * The FileSystem API provides a complete set of recommended operations for interacting with the file system.\n *\n * @remarks\n *\n * We recommend to use this instead of the native `fs` API, because `fs` is a minimal set of low-level primitives that must be mapped for each supported operating system. The FileSystem API takes a philosophical approach of providing \"one obvious way\" to do each operation. We also prefer synchronous operations except in cases where there would be a clear performance benefit for using async, since synchronous code is much easier to read and debug. Also, indiscriminate parallelism has been seen to actually worsen performance, versus improving it.\n *\n * Note that in the documentation, we refer to \"filesystem objects\", this can be a file, folder, symbolic link, hard link, directory junction, etc.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class FileSystem "
            }
          ],
          "releaseTag": "Public",
          "name": "FileSystem",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.appendToFile:member(1)",
              "docComment": "/**\n * Writes a text string to a file on disk, appending to the file if it already exists. Behind the scenes it uses `fs.appendFileSync()`.\n *\n * @remarks\n *\n * Throws an error if the folder doesn't exist, unless ensureFolder=true.\n *\n * @param filePath - The absolute or relative path of the file.\n *\n * @param contents - The text that should be written to the file.\n *\n * @param options - Optional settings that can change the behavior. Type: `IWriteFileOptions`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static appendToFile(filePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", contents: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:class"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemWriteFileOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemWriteFileOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filePath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "contents",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "appendToFile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.appendToFileAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.appendToFile}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static appendToFileAsync(filePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", contents: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:class"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemWriteFileOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemWriteFileOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filePath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "contents",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "appendToFileAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.changePosixModeBits:member(1)",
              "docComment": "/**\n * Changes the permissions (i.e. file mode bits) for a filesystem object. Behind the scenes it uses `fs.chmodSync()`.\n *\n * @param path - The absolute or relative path to the object that should be updated.\n *\n * @param modeBits - POSIX-style file mode bits specified using the {@link PosixModeBits} enum\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static changePosixModeBits(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", mode: "
                },
                {
                  "kind": "Reference",
                  "text": "PosixModeBits",
                  "canonicalReference": "@rushstack/node-core-library!PosixModeBits:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "mode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "changePosixModeBits"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.changePosixModeBitsAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.changePosixModeBits}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static changePosixModeBitsAsync(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", mode: "
                },
                {
                  "kind": "Reference",
                  "text": "PosixModeBits",
                  "canonicalReference": "@rushstack/node-core-library!PosixModeBits:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "mode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "changePosixModeBitsAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.copyFile:member(1)",
              "docComment": "/**\n * Copies a single file from one location to another. By default, destinationPath is overwritten if it already exists.\n *\n * @remarks\n *\n * The `copyFile()` API cannot be used to copy folders. It copies at most one file. Use {@link FileSystem.copyFiles} if you need to recursively copy a tree of folders.\n *\n * The implementation is based on `copySync()` from the `fs-extra` package.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static copyFile(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemCopyFileOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFileOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "copyFile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.copyFileAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.copyFile}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static copyFileAsync(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemCopyFileOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFileOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "copyFileAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.copyFiles:member(1)",
              "docComment": "/**\n * Copies a file or folder from one location to another, recursively copying any folder contents. By default, destinationPath is overwritten if it already exists.\n *\n * @remarks\n *\n * If you only intend to copy a single file, it is recommended to use {@link FileSystem.copyFile} instead to more clearly communicate the intended operation.\n *\n * The implementation is based on `copySync()` from the `fs-extra` package.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static copyFiles(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemCopyFilesOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFilesOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "copyFiles"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.copyFilesAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.copyFiles}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static copyFilesAsync(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemCopyFilesOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFilesOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "copyFilesAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.createHardLink:member(1)",
              "docComment": "/**\n * Creates a hard link. The link target must be a file, not a folder. Behind the scenes it uses `fs.linkSync()`.\n *\n * @remarks\n *\n * For security reasons, Windows operating systems by default require administrator elevation to create symbolic links. As a result, on Windows it's generally recommended for Node.js tools to use hard links (for files) or NTFS directory junctions (for folders), since regular users are allowed to create them. Hard links and junctions are less vulnerable to symlink attacks because they cannot reference a network share, and their target must exist at the time of link creation. Non-Windows operating systems generally don't restrict symlink creation, and as such are more vulnerable to symlink attacks. Note that Windows can be configured to permit regular users to create symlinks, for example by enabling Windows 10 \"developer mode.\"\n *\n * A hard link requires the link source and target to both be located on same disk volume; if not, use a symbolic link instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static createHardLink(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemCreateLinkOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemCreateLinkOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createHardLink"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.createHardLinkAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.createHardLink}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static createHardLinkAsync(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemCreateLinkOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemCreateLinkOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createHardLinkAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.createSymbolicLinkFile:member(1)",
              "docComment": "/**\n * Creates a symbolic link to a file. On Windows operating systems, this may require administrator elevation. Behind the scenes it uses `fs.symlinkSync()`.\n *\n * @remarks\n *\n * To avoid administrator elevation on Windows, use {@link FileSystem.createHardLink} instead.\n *\n * On Windows operating systems, the NTFS file system distinguishes file symlinks versus directory symlinks: If the target is not the correct type, the symlink will be created successfully, but will fail to resolve. Other operating systems do not make this distinction, in which case {@link FileSystem.createSymbolicLinkFile} and {@link FileSystem.createSymbolicLinkFolder} can be used interchangeably, but doing so will make your tool incompatible with Windows.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static createSymbolicLinkFile(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemCreateLinkOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemCreateLinkOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createSymbolicLinkFile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.createSymbolicLinkFileAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.createSymbolicLinkFile}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static createSymbolicLinkFileAsync(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemCreateLinkOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemCreateLinkOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createSymbolicLinkFileAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.createSymbolicLinkFolder:member(1)",
              "docComment": "/**\n * Creates a symbolic link to a folder. On Windows operating systems, this may require administrator elevation. Behind the scenes it uses `fs.symlinkSync()`.\n *\n * @remarks\n *\n * To avoid administrator elevation on Windows, use {@link FileSystem.createSymbolicLinkJunction} instead.\n *\n * On Windows operating systems, the NTFS file system distinguishes file symlinks versus directory symlinks: If the target is not the correct type, the symlink will be created successfully, but will fail to resolve. Other operating systems do not make this distinction, in which case {@link FileSystem.createSymbolicLinkFile} and {@link FileSystem.createSymbolicLinkFolder} can be used interchangeably, but doing so will make your tool incompatible with Windows.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static createSymbolicLinkFolder(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemCreateLinkOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemCreateLinkOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createSymbolicLinkFolder"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.createSymbolicLinkFolderAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.createSymbolicLinkFolder}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static createSymbolicLinkFolderAsync(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemCreateLinkOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemCreateLinkOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createSymbolicLinkFolderAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.createSymbolicLinkJunction:member(1)",
              "docComment": "/**\n * Creates an NTFS \"directory junction\" on Windows operating systems; for other operating systems, it creates a regular symbolic link. The link target must be a folder, not a file. Behind the scenes it uses `fs.symlinkSync()`.\n *\n * @remarks\n *\n * For security reasons, Windows operating systems by default require administrator elevation to create symbolic links. As a result, on Windows it's generally recommended for Node.js tools to use hard links (for files) or NTFS directory junctions (for folders), since regular users are allowed to create them. Hard links and junctions are less vulnerable to symlink attacks because they cannot reference a network share, and their target must exist at the time of link creation. Non-Windows operating systems generally don't restrict symlink creation, and as such are more vulnerable to symlink attacks. Note that Windows can be configured to permit regular users to create symlinks, for example by enabling Windows 10 \"developer mode.\"\n *\n * A directory junction requires the link source and target to both be located on local disk volumes; if not, use a symbolic link instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static createSymbolicLinkJunction(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemCreateLinkOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemCreateLinkOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createSymbolicLinkJunction"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.createSymbolicLinkJunctionAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.createSymbolicLinkJunction}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static createSymbolicLinkJunctionAsync(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemCreateLinkOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemCreateLinkOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createSymbolicLinkJunctionAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.deleteFile:member(1)",
              "docComment": "/**\n * Deletes a file. Can optionally throw if the file doesn't exist. Behind the scenes it uses `fs.unlinkSync()`.\n *\n * @param filePath - The absolute or relative path to the file that should be deleted.\n *\n * @param options - Optional settings that can change the behavior. Type: `IDeleteFileOptions`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static deleteFile(filePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemDeleteFileOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemDeleteFileOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filePath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "deleteFile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.deleteFileAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.deleteFile}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static deleteFileAsync(filePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemDeleteFileOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemDeleteFileOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filePath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "deleteFileAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.deleteFolder:member(1)",
              "docComment": "/**\n * Deletes a folder, including all of its contents. Behind the scenes is uses `fs-extra.removeSync()`.\n *\n * @remarks\n *\n * Does not throw if the folderPath does not exist.\n *\n * @param folderPath - The absolute or relative path to the folder which should be deleted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static deleteFolder(folderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "folderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "deleteFolder"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.deleteFolderAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.deleteFolder}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static deleteFolderAsync(folderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "folderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "deleteFolderAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.ensureEmptyFolder:member(1)",
              "docComment": "/**\n * Deletes the content of a folder, but not the folder itself. Also ensures the folder exists. Behind the scenes it uses `fs-extra.emptyDirSync()`.\n *\n * @remarks\n *\n * This is a workaround for a common race condition, where the virus scanner holds a lock on the folder for a brief period after it was deleted, causing EBUSY errors for any code that tries to recreate the folder.\n *\n * @param folderPath - The absolute or relative path to the folder which should have its contents deleted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static ensureEmptyFolder(folderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "folderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "ensureEmptyFolder"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.ensureEmptyFolderAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.ensureEmptyFolder}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static ensureEmptyFolderAsync(folderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "folderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "ensureEmptyFolderAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.ensureFolder:member(1)",
              "docComment": "/**\n * Recursively creates a folder at a given path. Behind the scenes is uses `fs-extra.ensureDirSync()`.\n *\n * @remarks\n *\n * Throws an exception if anything in the folderPath is not a folder.\n *\n * @param folderPath - The absolute or relative path of the folder which should be created.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static ensureFolder(folderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "folderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "ensureFolder"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.ensureFolderAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.ensureFolder}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static ensureFolderAsync(folderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "folderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "ensureFolderAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.exists:member(1)",
              "docComment": "/**\n * Returns true if the path exists on disk. Behind the scenes it uses `fs.existsSync()`.\n *\n * @remarks\n *\n * There is a debate about the fact that after `fs.existsSync()` returns true, the file might be deleted before fs.readSync() is called, which would imply that everybody should catch a `readSync()` exception, and nobody should ever use `fs.existsSync()`. We find this to be unpersuasive, since \"unexceptional exceptions\" really hinder the break-on-exception debugging experience. Also, throwing/catching is generally slow.\n *\n * @param path - The absolute or relative path to the filesystem object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static exists(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "exists"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.existsAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.exists}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static existsAsync(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "existsAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.formatPosixModeBits:member(1)",
              "docComment": "/**\n * Returns a 10-character string representation of a PosixModeBits value similar to what would be displayed by a command such as \"ls -l\" on a POSIX-like operating system.\n *\n * @remarks\n *\n * For example, `PosixModeBits.AllRead | PosixModeBits.AllWrite` would be formatted as \"-rw-rw-rw-\".\n *\n * @param modeBits - POSIX-style file mode bits specified using the {@link PosixModeBits} enum\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static formatPosixModeBits(modeBits: "
                },
                {
                  "kind": "Reference",
                  "text": "PosixModeBits",
                  "canonicalReference": "@rushstack/node-core-library!PosixModeBits:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "modeBits",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "formatPosixModeBits"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.getLinkStatistics:member(1)",
              "docComment": "/**\n * Gets the statistics of a filesystem object. Does NOT follow the link to its target. Behind the scenes it uses `fs.lstatSync()`.\n *\n * @param path - The absolute or relative path to the filesystem object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getLinkStatistics(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "FileSystemStats",
                  "canonicalReference": "@rushstack/node-core-library!FileSystemStats:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getLinkStatistics"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.getLinkStatisticsAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.getLinkStatistics}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getLinkStatisticsAsync(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "FileSystemStats",
                  "canonicalReference": "@rushstack/node-core-library!FileSystemStats:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getLinkStatisticsAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.getPosixModeBits:member(1)",
              "docComment": "/**\n * Retrieves the permissions (i.e. file mode bits) for a filesystem object. Behind the scenes it uses `fs.chmodSync()`.\n *\n * @remarks\n *\n * This calls {@link FileSystem.getStatistics} to get the POSIX mode bits. If statistics in addition to the mode bits are needed, it is more efficient to call {@link FileSystem.getStatistics} directly instead.\n *\n * @param path - The absolute or relative path to the object that should be updated.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getPosixModeBits(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PosixModeBits",
                  "canonicalReference": "@rushstack/node-core-library!PosixModeBits:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getPosixModeBits"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.getPosixModeBitsAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.getPosixModeBits}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getPosixModeBitsAsync(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PosixModeBits",
                  "canonicalReference": "@rushstack/node-core-library!PosixModeBits:enum"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getPosixModeBitsAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.getRealPath:member(1)",
              "docComment": "/**\n * Follows a link to its destination and returns the absolute path to the final target of the link. Behind the scenes it uses `fs.realpathSync()`.\n *\n * @param linkPath - The path to the link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getRealPath(linkPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "linkPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getRealPath"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.getRealPathAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.getRealPath}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getRealPathAsync(linkPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "linkPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getRealPathAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.getStatistics:member(1)",
              "docComment": "/**\n * Gets the statistics for a particular filesystem object. If the path is a link, this function follows the link and returns statistics about the link target. Behind the scenes it uses `fs.statSync()`.\n *\n * @param path - The absolute or relative path to the filesystem object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getStatistics(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "FileSystemStats",
                  "canonicalReference": "@rushstack/node-core-library!FileSystemStats:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getStatistics"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.getStatisticsAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.getStatistics}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getStatisticsAsync(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "FileSystemStats",
                  "canonicalReference": "@rushstack/node-core-library!FileSystemStats:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getStatisticsAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.isErrnoException:member(1)",
              "docComment": "/**\n * Detects if the provided error object is a `NodeJS.ErrnoException`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isErrnoException(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "error",
                  "canonicalReference": "@rushstack/node-core-library!~error"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "NodeJS.ErrnoException",
                  "canonicalReference": "!NodeJS.ErrnoException:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isErrnoException"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.isExistError:member(1)",
              "docComment": "/**\n * Returns true if the error object indicates the file or folder already exists (`EEXIST`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isExistError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isExistError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.isFileDoesNotExistError:member(1)",
              "docComment": "/**\n * Returns true if the error object indicates the file does not exist (`ENOENT`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isFileDoesNotExistError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isFileDoesNotExistError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.isFolderDoesNotExistError:member(1)",
              "docComment": "/**\n * Returns true if the error object indicates the folder does not exist (`ENOTDIR`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isFolderDoesNotExistError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isFolderDoesNotExistError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.isNotExistError:member(1)",
              "docComment": "/**\n * Returns true if the error object indicates the file or folder does not exist (`ENOENT` or `ENOTDIR`)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isNotExistError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isNotExistError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.isUnlinkNotPermittedError:member(1)",
              "docComment": "/**\n * Returns true if the error object indicates that the `unlink` system call failed due to a permissions issue (`EPERM`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isUnlinkNotPermittedError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isUnlinkNotPermittedError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.move:member(1)",
              "docComment": "/**\n * Moves a file. The folder must exist, unless the `ensureFolderExists` option is provided. Behind the scenes it uses `fs-extra.moveSync()`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static move(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemMoveOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemMoveOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "move"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.moveAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.move}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static moveAsync(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemMoveOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemMoveOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "moveAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.readFile:member(1)",
              "docComment": "/**\n * Reads the contents of a file into a string. Behind the scenes it uses `fs.readFileSync()`.\n *\n * @param filePath - The relative or absolute path to the file whose contents should be read.\n *\n * @param options - Optional settings that can change the behavior. Type: `IReadFileOptions`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readFile(filePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemReadFileOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemReadFileOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filePath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "readFile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.readFileAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.readFile}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readFileAsync(filePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemReadFileOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemReadFileOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filePath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "readFileAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.readFileToBuffer:member(1)",
              "docComment": "/**\n * Reads the contents of a file into a buffer. Behind the scenes is uses `fs.readFileSync()`.\n *\n * @param filePath - The relative or absolute path to the file whose contents should be read.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readFileToBuffer(filePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filePath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "readFileToBuffer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.readFileToBufferAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.readFileToBuffer}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readFileToBufferAsync(filePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filePath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "readFileToBufferAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.readFolder:member(1)",
              "docComment": "/**\n * @deprecated\n *\n * Use {@link FileSystem.readFolderItemNames} instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readFolder(folderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemReadFolderOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemReadFolderOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "folderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "readFolder"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.readFolderAsync:member(1)",
              "docComment": "/**\n * @deprecated\n *\n * Use {@link FileSystem.readFolderItemNamesAsync} instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readFolderAsync(folderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemReadFolderOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemReadFolderOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "folderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "readFolderAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.readFolderItemNames:member(1)",
              "docComment": "/**\n * Reads the names of folder entries, not including \".\" or \"..\". Behind the scenes it uses `fs.readdirSync()`.\n *\n * @param folderPath - The absolute or relative path to the folder which should be read.\n *\n * @param options - Optional settings that can change the behavior. Type: `IReadFolderOptions`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readFolderItemNames(folderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemReadFolderOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemReadFolderOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "folderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "readFolderItemNames"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.readFolderItemNamesAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.readFolderItemNames}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readFolderItemNamesAsync(folderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemReadFolderOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemReadFolderOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "folderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "readFolderItemNamesAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.readFolderItems:member(1)",
              "docComment": "/**\n * Reads the contents of the folder, not including \".\" or \"..\", returning objects including the entry names and types. Behind the scenes it uses `fs.readdirSync()`.\n *\n * @param folderPath - The absolute or relative path to the folder which should be read.\n *\n * @param options - Optional settings that can change the behavior. Type: `IReadFolderOptions`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readFolderItems(folderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemReadFolderOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemReadFolderOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "FolderItem",
                  "canonicalReference": "@rushstack/node-core-library!FolderItem:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "folderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "readFolderItems"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.readFolderItemsAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.readFolderItems}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readFolderItemsAsync(folderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemReadFolderOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemReadFolderOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "FolderItem",
                  "canonicalReference": "@rushstack/node-core-library!FolderItem:type"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "folderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "readFolderItemsAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.readLink:member(1)",
              "docComment": "/**\n * If `path` refers to a symbolic link, this returns the path of the link target, which may be an absolute or relative path.\n *\n * @remarks\n *\n * If `path` refers to a filesystem object that is not a symbolic link, then an `ErrnoException` is thrown with code 'UNKNOWN'. If `path` does not exist, then an `ErrnoException` is thrown with code `ENOENT`.\n *\n * @param path - The absolute or relative path to the symbolic link.\n *\n * @returns the path of the link target\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readLink(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "readLink"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.readLinkAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.readLink}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readLinkAsync(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "readLinkAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.updateTimes:member(1)",
              "docComment": "/**\n * Updates the accessed and modified timestamps of the filesystem object referenced by path. Behind the scenes it uses `fs.utimesSync()`. The caller should specify both times in the `times` parameter.\n *\n * @param path - The path of the file that should be modified.\n *\n * @param times - The times that the object should be updated to reflect.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static updateTimes(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", times: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemUpdateTimeParameters",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemUpdateTimeParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "times",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "updateTimes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.updateTimesAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.updateTimes}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static updateTimesAsync(path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", times: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemUpdateTimeParameters",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemUpdateTimeParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "times",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "updateTimesAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.writeFile:member(1)",
              "docComment": "/**\n * Writes a text string to a file on disk, overwriting the file if it already exists. Behind the scenes it uses `fs.writeFileSync()`.\n *\n * @remarks\n *\n * Throws an error if the folder doesn't exist, unless ensureFolder=true.\n *\n * @param filePath - The absolute or relative path of the file.\n *\n * @param contents - The text that should be written to the file.\n *\n * @param options - Optional settings that can change the behavior. Type: `IWriteFileOptions`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static writeFile(filePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", contents: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:class"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemWriteFileOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemWriteFileOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filePath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "contents",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "writeFile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileSystem.writeFileAsync:member(1)",
              "docComment": "/**\n * An async version of {@link FileSystem.writeFile}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static writeFileAsync(filePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", contents: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:class"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileSystemWriteFileOptions",
                  "canonicalReference": "@rushstack/node-core-library!IFileSystemWriteFileOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filePath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "contents",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "writeFileAsync"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rushstack/node-core-library!FileSystemCopyFilesAsyncFilter:type",
          "docComment": "/**\n * Callback function type for {@link IFileSystemCopyFilesAsyncOptions.filter}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FileSystemCopyFilesAsyncFilter = "
            },
            {
              "kind": "Content",
              "text": "(sourcePath: string, destinationPath: string) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<boolean>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "FileSystemCopyFilesAsyncFilter",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rushstack/node-core-library!FileSystemCopyFilesFilter:type",
          "docComment": "/**\n * Callback function type for {@link IFileSystemCopyFilesOptions.filter}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FileSystemCopyFilesFilter = "
            },
            {
              "kind": "Content",
              "text": "(sourcePath: string, destinationPath: string) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "FileSystemCopyFilesFilter",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rushstack/node-core-library!FileSystemStats:type",
          "docComment": "/**\n * An alias for the Node.js `fs.Stats` object.\n *\n * @remarks\n *\n * This avoids the need to import the `fs` package when using the {@link FileSystem} API.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FileSystemStats = "
            },
            {
              "kind": "Reference",
              "text": "fs.Stats",
              "canonicalReference": "!\"\\\"fs\\\"\".Stats:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "FileSystemStats",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!FileWriter:class",
          "docComment": "/**\n * API for interacting with file handles.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class FileWriter "
            }
          ],
          "releaseTag": "Public",
          "name": "FileWriter",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileWriter#close:member(1)",
              "docComment": "/**\n * Closes the file handle permanently. No operations can be made on this file handle after calling this. Behind the scenes it uses `fs.closeSync()` and releases the file descriptor to be re-used.\n *\n * @remarks\n *\n * The `close()` method can be called more than once; additional calls are ignored.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "close"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!FileWriter#filePath:member",
              "docComment": "/**\n * The `filePath` that was passed to {@link FileWriter.open}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly filePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "filePath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileWriter.open:member(1)",
              "docComment": "/**\n * Opens a new file handle to the file at the specified path and given mode. Behind the scenes it uses `fs.openSync()`. The behaviour of this function is platform specific. See: https://nodejs.org/docs/latest-v8.x/api/fs.html#fs_fs_open_path_flags_mode_callback\n *\n * @param filePath - The absolute or relative path to the file handle that should be opened.\n *\n * @param flags - The flags for opening the handle\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static open(filePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", flags?: "
                },
                {
                  "kind": "Reference",
                  "text": "IFileWriterFlags",
                  "canonicalReference": "@rushstack/node-core-library!IFileWriterFlags:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "FileWriter",
                  "canonicalReference": "@rushstack/node-core-library!FileWriter:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filePath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "flags",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "open"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!FileWriter#write:member(1)",
              "docComment": "/**\n * Writes some text to the given file handle. Throws if the file handle has been closed. Behind the scenes it uses `fs.writeSync()`.\n *\n * @param text - The text to write to the file.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "write(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "write"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@rushstack/node-core-library!FolderConstants:enum",
          "docComment": "/**\n * String constants for common folder names.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum FolderConstants "
            }
          ],
          "releaseTag": "Public",
          "name": "FolderConstants",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!FolderConstants.Git:member",
              "docComment": "/**\n * \".git\" - the data storage for a Git working folder\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Git = "
                },
                {
                  "kind": "Content",
                  "text": "\".git\""
                }
              ],
              "releaseTag": "Public",
              "name": "Git",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!FolderConstants.NodeModules:member",
              "docComment": "/**\n * \"node_modules\" - the folder where package managers install their files\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NodeModules = "
                },
                {
                  "kind": "Content",
                  "text": "\"node_modules\""
                }
              ],
              "releaseTag": "Public",
              "name": "NodeModules",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rushstack/node-core-library!FolderItem:type",
          "docComment": "/**\n * An alias for the Node.js `fs.Dirent` object.\n *\n * @remarks\n *\n * This avoids the need to import the `fs` package when using the {@link FileSystem} API.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FolderItem = "
            },
            {
              "kind": "Reference",
              "text": "fs.Dirent",
              "canonicalReference": "!\"\\\"fs\\\"\".Dirent:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "FolderItem",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IAnsiEscapeConvertForTestsOptions:interface",
          "docComment": "/**\n * Options for {@link AnsiEscape.formatForTests}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IAnsiEscapeConvertForTestsOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IAnsiEscapeConvertForTestsOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IAnsiEscapeConvertForTestsOptions#encodeNewlines:member",
              "docComment": "/**\n * If true then `\\n` will be replaced by `[n]`, and `\\r` will be replaced by `[r]`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encodeNewlines?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "encodeNewlines",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IAsyncParallelismOptions:interface",
          "docComment": "/**\n * Options for controlling the parallelism of asynchronous operations.\n *\n * @remarks\n *\n * Used with {@link Async.mapAsync} and {@link Async.forEachAsync}.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IAsyncParallelismOptions "
            }
          ],
          "releaseTag": "Beta",
          "name": "IAsyncParallelismOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IAsyncParallelismOptions#concurrency:member",
              "docComment": "/**\n * Optionally used with the {@link Async.mapAsync} and {@link Async.forEachAsync} to limit the maximum number of concurrent promises to the specified number.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "concurrency?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "concurrency",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface",
          "docComment": "/**\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IColorableSequence "
            }
          ],
          "releaseTag": "Beta",
          "name": "IColorableSequence",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IColorableSequence#backgroundColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "@rushstack/node-core-library!ColorValue:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "backgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IColorableSequence#foregroundColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "foregroundColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "ColorValue",
                  "canonicalReference": "@rushstack/node-core-library!ColorValue:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "foregroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IColorableSequence#isEol:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isEol?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "isEol",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IColorableSequence#text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IColorableSequence#textAttributes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textAttributes?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextAttribute",
                  "canonicalReference": "@rushstack/node-core-library!TextAttribute:enum"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "textAttributes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IConsoleTerminalProviderOptions:interface",
          "docComment": "/**\n * Options to be provided to a {@link ConsoleTerminalProvider}\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IConsoleTerminalProviderOptions "
            }
          ],
          "releaseTag": "Beta",
          "name": "IConsoleTerminalProviderOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IConsoleTerminalProviderOptions#debugEnabled:member",
              "docComment": "/**\n * If true, print debug logging messages. Note that \"verbose\" and \"debug\" are considered separate message filters; if you want debug to imply verbose, it is up to your application code to enforce that.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debugEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "debugEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IConsoleTerminalProviderOptions#verboseEnabled:member",
              "docComment": "/**\n * If true, print verbose logging messages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "verboseEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "verboseEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IEnvironmentEntry:interface",
          "docComment": "/**\n * A process environment variable name and its value. Used by {@link EnvironmentMap}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IEnvironmentEntry "
            }
          ],
          "releaseTag": "Public",
          "name": "IEnvironmentEntry",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IEnvironmentEntry#name:member",
              "docComment": "/**\n * The name of the environment variable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IEnvironmentEntry#value:member",
              "docComment": "/**\n * The value of the environment variable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IExecutableResolveOptions:interface",
          "docComment": "/**\n * Options for Executable.tryResolve().\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IExecutableResolveOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IExecutableResolveOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IExecutableResolveOptions#currentWorkingDirectory:member",
              "docComment": "/**\n * The current working directory. If omitted, process.cwd() will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "currentWorkingDirectory?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "currentWorkingDirectory",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IExecutableResolveOptions#environment:member",
              "docComment": "/**\n * The environment variables for the child process.\n *\n * @remarks\n *\n * If `environment` and `environmentMap` are both omitted, then `process.env` will be used. If `environment` and `environmentMap` cannot both be specified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "environment?: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeJS.ProcessEnv",
                  "canonicalReference": "!NodeJS.ProcessEnv:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "environment",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IExecutableResolveOptions#environmentMap:member",
              "docComment": "/**\n * The environment variables for the child process.\n *\n * @remarks\n *\n * If `environment` and `environmentMap` are both omitted, then `process.env` will be used. If `environment` and `environmentMap` cannot both be specified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "environmentMap?: "
                },
                {
                  "kind": "Reference",
                  "text": "EnvironmentMap",
                  "canonicalReference": "@rushstack/node-core-library!EnvironmentMap:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "environmentMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IExecutableSpawnOptions:interface",
          "docComment": "/**\n * Options for {@link Executable.spawn}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IExecutableSpawnOptions extends "
            },
            {
              "kind": "Reference",
              "text": "IExecutableResolveOptions",
              "canonicalReference": "@rushstack/node-core-library!IExecutableResolveOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IExecutableSpawnOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IExecutableSpawnOptions#stdio:member",
              "docComment": "/**\n * The stdio mappings for the child process.\n *\n * NOTE: If IExecutableSpawnSyncOptions.input is provided, it will take precedence over the stdin mapping (stdio[0]).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stdio?: "
                },
                {
                  "kind": "Reference",
                  "text": "ExecutableStdioMapping",
                  "canonicalReference": "@rushstack/node-core-library!ExecutableStdioMapping:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "stdio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IExecutableSpawnSyncOptions:interface",
          "docComment": "/**\n * Options for {@link Executable.spawnSync}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IExecutableSpawnSyncOptions extends "
            },
            {
              "kind": "Reference",
              "text": "IExecutableResolveOptions",
              "canonicalReference": "@rushstack/node-core-library!IExecutableResolveOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IExecutableSpawnSyncOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IExecutableSpawnSyncOptions#input:member",
              "docComment": "/**\n * The content to be passed to the child process's stdin.\n *\n * NOTE: If specified, this content replaces any IExecutableSpawnSyncOptions.stdio[0] mapping for stdin.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "input?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IExecutableSpawnSyncOptions#maxBuffer:member",
              "docComment": "/**\n * The largest amount of bytes allowed on stdout or stderr for this synchronous operation. If exceeded, the child process will be terminated. The default is 200 * 1024.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxBuffer?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxBuffer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IExecutableSpawnSyncOptions#stdio:member",
              "docComment": "/**\n * The stdio mappings for the child process.\n *\n * NOTE: If IExecutableSpawnSyncOptions.input is provided, it will take precedence over the stdin mapping (stdio[0]).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stdio?: "
                },
                {
                  "kind": "Reference",
                  "text": "ExecutableStdioMapping",
                  "canonicalReference": "@rushstack/node-core-library!ExecutableStdioMapping:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "stdio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IExecutableSpawnSyncOptions#timeoutMs:member",
              "docComment": "/**\n * The maximum time the process is allowed to run before it will be terminated.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeoutMs?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timeoutMs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFileBaseOptions:interface",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFileSystemCopyFileBaseOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IFileSystemCopyFileBaseOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFileBaseOptions#alreadyExistsBehavior:member",
              "docComment": "/**\n * Specifies what to do if the destination path already exists.\n *\n * @defaultValue\n *\n * {@link AlreadyExistsBehavior.Overwrite}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alreadyExistsBehavior?: "
                },
                {
                  "kind": "Reference",
                  "text": "AlreadyExistsBehavior",
                  "canonicalReference": "@rushstack/node-core-library!AlreadyExistsBehavior:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alreadyExistsBehavior",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFileBaseOptions#sourcePath:member",
              "docComment": "/**\n * The path of the existing object to be copied. The path may be absolute or relative.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sourcePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sourcePath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFileOptions:interface",
          "docComment": "/**\n * The options for {@link FileSystem.copyFile}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFileSystemCopyFileOptions extends "
            },
            {
              "kind": "Reference",
              "text": "IFileSystemCopyFileBaseOptions",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFileBaseOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IFileSystemCopyFileOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFileOptions#destinationPath:member",
              "docComment": "/**\n * The path that the object will be copied to. The path may be absolute or relative.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destinationPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "destinationPath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFilesAsyncOptions:interface",
          "docComment": "/**\n * The options for {@link FileSystem.copyFilesAsync}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFileSystemCopyFilesAsyncOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IFileSystemCopyFilesAsyncOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFilesAsyncOptions#alreadyExistsBehavior:member",
              "docComment": "/**\n * Specifies what to do if a destination path already exists.\n *\n * @remarks\n *\n * This setting is applied individually for each file being copied. For example, `AlreadyExistsBehavior.Overwrite` will not recursively delete a folder whose path corresponds to an individual file that is being copied to that location.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alreadyExistsBehavior?: "
                },
                {
                  "kind": "Reference",
                  "text": "AlreadyExistsBehavior",
                  "canonicalReference": "@rushstack/node-core-library!AlreadyExistsBehavior:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alreadyExistsBehavior",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFilesAsyncOptions#dereferenceSymlinks:member",
              "docComment": "/**\n * If true, then when copying symlinks, copy the target object instead of copying the link.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dereferenceSymlinks?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dereferenceSymlinks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFilesAsyncOptions#destinationPath:member",
              "docComment": "/**\n * The path that the files will be copied to. The path may be absolute or relative.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destinationPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "destinationPath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFilesAsyncOptions#filter:member",
              "docComment": "/**\n * A callback that will be invoked for each path that is copied. The callback can return `false` to cause the object to be excluded from the operation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filter?: "
                },
                {
                  "kind": "Reference",
                  "text": "FileSystemCopyFilesAsyncFilter",
                  "canonicalReference": "@rushstack/node-core-library!FileSystemCopyFilesAsyncFilter:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "FileSystemCopyFilesFilter",
                  "canonicalReference": "@rushstack/node-core-library!FileSystemCopyFilesFilter:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "filter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFilesAsyncOptions#preserveTimestamps:member",
              "docComment": "/**\n * If true, then the target object will be assigned \"last modification\" and \"last access\" timestamps that are the same as the source. Otherwise, the OS default timestamps are assigned.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preserveTimestamps?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "preserveTimestamps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFilesAsyncOptions#sourcePath:member",
              "docComment": "/**\n * The starting path of the file or folder to be copied. The path may be absolute or relative.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sourcePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sourcePath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFilesOptions:interface",
          "docComment": "/**\n * The options for {@link FileSystem.copyFiles}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFileSystemCopyFilesOptions extends "
            },
            {
              "kind": "Reference",
              "text": "IFileSystemCopyFilesAsyncOptions",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFilesAsyncOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IFileSystemCopyFilesOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCopyFilesOptions#filter:member",
              "docComment": "/**\n * A callback that will be invoked for each path that is copied. The callback can return `false` to cause the object to be excluded from the operation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filter?: "
                },
                {
                  "kind": "Reference",
                  "text": "FileSystemCopyFilesFilter",
                  "canonicalReference": "@rushstack/node-core-library!FileSystemCopyFilesFilter:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "filter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IFileSystemCreateLinkOptions:interface",
          "docComment": "/**\n * The options for {@link FileSystem.createSymbolicLinkJunction}, {@link FileSystem.createSymbolicLinkFile}, {@link FileSystem.createSymbolicLinkFolder}, and {@link FileSystem.createHardLink}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFileSystemCreateLinkOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IFileSystemCreateLinkOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCreateLinkOptions#alreadyExistsBehavior:member",
              "docComment": "/**\n * Specifies what to do if the path to create already exists. The default is `AlreadyExistsBehavior.Error`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alreadyExistsBehavior?: "
                },
                {
                  "kind": "Reference",
                  "text": "AlreadyExistsBehavior",
                  "canonicalReference": "@rushstack/node-core-library!AlreadyExistsBehavior:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "alreadyExistsBehavior",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCreateLinkOptions#linkTargetPath:member",
              "docComment": "/**\n * The newly created symbolic link will point to `linkTargetPath` as its target.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "linkTargetPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "linkTargetPath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemCreateLinkOptions#newLinkPath:member",
              "docComment": "/**\n * The newly created symbolic link will have this path.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newLinkPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "newLinkPath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IFileSystemDeleteFileOptions:interface",
          "docComment": "/**\n * The options for {@link FileSystem.deleteFile}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFileSystemDeleteFileOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IFileSystemDeleteFileOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemDeleteFileOptions#throwIfNotExists:member",
              "docComment": "/**\n * If true, will throw an exception if the file did not exist before `deleteFile()` was called.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "throwIfNotExists?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "throwIfNotExists",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IFileSystemMoveOptions:interface",
          "docComment": "/**\n * The options for {@link FileSystem.move}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFileSystemMoveOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IFileSystemMoveOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemMoveOptions#destinationPath:member",
              "docComment": "/**\n * The new path for the object. The path may be absolute or relative.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destinationPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "destinationPath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemMoveOptions#ensureFolderExists:member",
              "docComment": "/**\n * If true, will ensure the folder is created before writing the file.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ensureFolderExists?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "ensureFolderExists",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemMoveOptions#overwrite:member",
              "docComment": "/**\n * If true, will overwrite the file if it already exists.\n *\n * @defaultValue\n *\n * true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "overwrite?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "overwrite",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemMoveOptions#sourcePath:member",
              "docComment": "/**\n * The path of the existing object to be moved. The path may be absolute or relative.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sourcePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sourcePath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IFileSystemReadFileOptions:interface",
          "docComment": "/**\n * The options for {@link FileSystem.readFile}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFileSystemReadFileOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IFileSystemReadFileOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemReadFileOptions#convertLineEndings:member",
              "docComment": "/**\n * If specified, will normalize line endings to the specified style of newline.\n *\n * @defaultValue\n *\n * `undefined` which means no conversion will be performed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "convertLineEndings?: "
                },
                {
                  "kind": "Reference",
                  "text": "NewlineKind",
                  "canonicalReference": "@rushstack/node-core-library!NewlineKind:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "convertLineEndings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemReadFileOptions#encoding:member",
              "docComment": "/**\n * If specified, will change the encoding of the file that will be written.\n *\n * @defaultValue\n *\n * Encoding.Utf8\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoding?: "
                },
                {
                  "kind": "Reference",
                  "text": "Encoding",
                  "canonicalReference": "@rushstack/node-core-library!Encoding:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "encoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IFileSystemReadFolderOptions:interface",
          "docComment": "/**\n * The options for {@link FileSystem.readFolder}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFileSystemReadFolderOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IFileSystemReadFolderOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemReadFolderOptions#absolutePaths:member",
              "docComment": "/**\n * If true, returns the absolute paths of the files in the folder.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "absolutePaths?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "absolutePaths",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IFileSystemUpdateTimeParameters:interface",
          "docComment": "/**\n * The options for {@link FileSystem.updateTimes} Both times must be specified.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFileSystemUpdateTimeParameters "
            }
          ],
          "releaseTag": "Public",
          "name": "IFileSystemUpdateTimeParameters",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemUpdateTimeParameters#accessedTime:member",
              "docComment": "/**\n * The POSIX epoch time or Date when this was last accessed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accessedTime: "
                },
                {
                  "kind": "Content",
                  "text": "number | "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accessedTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemUpdateTimeParameters#modifiedTime:member",
              "docComment": "/**\n * The POSIX epoch time or Date when this was last modified\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "modifiedTime: "
                },
                {
                  "kind": "Content",
                  "text": "number | "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "modifiedTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IFileSystemWriteFileOptions:interface",
          "docComment": "/**\n * The options for {@link FileSystem.writeFile}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFileSystemWriteFileOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IFileSystemWriteFileOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemWriteFileOptions#convertLineEndings:member",
              "docComment": "/**\n * If specified, will normalize line endings to the specified style of newline.\n *\n * @defaultValue\n *\n * `undefined` which means no conversion will be performed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "convertLineEndings?: "
                },
                {
                  "kind": "Reference",
                  "text": "NewlineKind",
                  "canonicalReference": "@rushstack/node-core-library!NewlineKind:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "convertLineEndings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemWriteFileOptions#encoding:member",
              "docComment": "/**\n * If specified, will change the encoding of the file that will be written.\n *\n * @defaultValue\n *\n * \"utf8\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoding?: "
                },
                {
                  "kind": "Reference",
                  "text": "Encoding",
                  "canonicalReference": "@rushstack/node-core-library!Encoding:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "encoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileSystemWriteFileOptions#ensureFolderExists:member",
              "docComment": "/**\n * If true, will ensure the folder is created before writing the file.\n *\n * @defaultValue\n *\n * false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ensureFolderExists?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "ensureFolderExists",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IFileWriterFlags:interface",
          "docComment": "/**\n * Interface which represents the flags about which mode the file should be opened in.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IFileWriterFlags "
            }
          ],
          "releaseTag": "Public",
          "name": "IFileWriterFlags",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileWriterFlags#append:member",
              "docComment": "/**\n * Open file for appending.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "append?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "append",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IFileWriterFlags#exclusive:member",
              "docComment": "/**\n * Fails if path exists. The exclusive flag ensures that path is newly created.\n *\n * @remarks\n *\n * On POSIX-like operating systems, path is considered to exist even if it is a symlink to a non-existent file. The exclusive flag may or may not work with network file systems.\n *\n * POSIX is a registered trademark of the Institute of Electrical and Electronic Engineers, Inc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exclusive?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "exclusive",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IImportResolveModuleOptions:interface",
          "docComment": "/**\n * Options for {@link Import.resolveModule}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IImportResolveModuleOptions extends "
            },
            {
              "kind": "Reference",
              "text": "IImportResolveOptions",
              "canonicalReference": "@rushstack/node-core-library!IImportResolveOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IImportResolveModuleOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IImportResolveModuleOptions#modulePath:member",
              "docComment": "/**\n * The module identifier to resolve. For example \"\\@rushstack/node-core-library\" or \"\\@rushstack/node-core-library/lib/index.js\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "modulePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "modulePath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IImportResolveOptions:interface",
          "docComment": "/**\n * Common options shared by {@link IImportResolveModuleOptions} and {@link IImportResolvePackageOptions}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IImportResolveOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IImportResolveOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IImportResolveOptions#allowSelfReference:member",
              "docComment": "/**\n * If true, then resolvePath is allowed to refer to the package.json of the active project.\n *\n * @remarks\n *\n * This will take precedence over any installed dependency with the same name. Note that this requires an additional PackageJsonLookup calculation.\n *\n * Example:\n * ```ts\n * // Returns an absolute path to the current package\n * Import.resolveModulePath({\n *   resolvePath: \"current-project\",\n *   basePath: process.cwd(),\n *   allowSelfReference: true\n * })\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowSelfReference?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "allowSelfReference",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IImportResolveOptions#baseFolderPath:member",
              "docComment": "/**\n * The path from which {@link IImportResolveModuleOptions.modulePath} or {@link IImportResolvePackageOptions.packageName} should be resolved.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "baseFolderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "baseFolderPath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IImportResolveOptions#includeSystemModules:member",
              "docComment": "/**\n * If true, if the package name matches a Node.js system module, then the return value will be the package name without any path.\n *\n * @remarks\n *\n * This will take precedence over an installed NPM package of the same name.\n *\n * Example:\n * ```ts\n * // Returns the string \"fs\" indicating the Node.js system module\n * Import.resolveModulePath({\n *   resolvePath: \"fs\",\n *   basePath: process.cwd()\n * })\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "includeSystemModules?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "includeSystemModules",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IImportResolvePackageOptions:interface",
          "docComment": "/**\n * Options for {@link Import.resolvePackage}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IImportResolvePackageOptions extends "
            },
            {
              "kind": "Reference",
              "text": "IImportResolveOptions",
              "canonicalReference": "@rushstack/node-core-library!IImportResolveOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IImportResolvePackageOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IImportResolvePackageOptions#packageName:member",
              "docComment": "/**\n * The package name to resolve. For example \"\\@rushstack/node-core-library\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "packageName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "packageName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IJsonFileSaveOptions:interface",
          "docComment": "/**\n * Options for JsonFile.saveJsonFile()\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IJsonFileSaveOptions extends "
            },
            {
              "kind": "Reference",
              "text": "IJsonFileStringifyOptions",
              "canonicalReference": "@rushstack/node-core-library!IJsonFileStringifyOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IJsonFileSaveOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IJsonFileSaveOptions#ensureFolderExists:member",
              "docComment": "/**\n * Creates the folder recursively using FileSystem.ensureFolder() Defaults to false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ensureFolderExists?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "ensureFolderExists",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IJsonFileSaveOptions#onlyIfChanged:member",
              "docComment": "/**\n * If there is an existing file, and the contents have not changed, then don't write anything; this preserves the old timestamp.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onlyIfChanged?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onlyIfChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IJsonFileSaveOptions#updateExistingFile:member",
              "docComment": "/**\n * If true, use the \"jju\" library to preserve the existing JSON formatting: The file will be loaded from the target filename, the new content will be merged in (preserving whitespace and comments), and then the file will be overwritten with the merged contents. If the target file does not exist, then the file is saved normally.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateExistingFile?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "updateExistingFile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IJsonFileStringifyOptions:interface",
          "docComment": "/**\n * Options for JsonFile.stringify()\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IJsonFileStringifyOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IJsonFileStringifyOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IJsonFileStringifyOptions#headerComment:member",
              "docComment": "/**\n * If specified, this header will be prepended to the start of the file. The header must consist of lines prefixed by \"//\" characters.\n *\n * @remarks\n *\n * When used with {@link IJsonFileSaveOptions.updateExistingFile} or {@link JsonFile.updateString}, the header will ONLY be added for a newly created file.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headerComment?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "headerComment",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IJsonFileStringifyOptions#ignoreUndefinedValues:member",
              "docComment": "/**\n * If true, conforms to the standard behavior of JSON.stringify() when a property has the value `undefined`. Specifically, the key will be dropped from the emitted object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ignoreUndefinedValues?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "ignoreUndefinedValues",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IJsonFileStringifyOptions#newlineConversion:member",
              "docComment": "/**\n * If provided, the specified newline type will be used instead of the default `\\r\\n`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newlineConversion?: "
                },
                {
                  "kind": "Reference",
                  "text": "NewlineKind",
                  "canonicalReference": "@rushstack/node-core-library!NewlineKind:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "newlineConversion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IJsonFileStringifyOptions#prettyFormatting:member",
              "docComment": "/**\n * If true, then the \"jju\" library will be used to improve the text formatting. Note that this is slightly slower than the native JSON.stringify() implementation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prettyFormatting?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "prettyFormatting",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IJsonSchemaErrorInfo:interface",
          "docComment": "/**\n * Callback function arguments for JsonSchema.validateObjectWithCallback();\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IJsonSchemaErrorInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "IJsonSchemaErrorInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IJsonSchemaErrorInfo#details:member",
              "docComment": "/**\n * The z-schema error tree, formatted as an indented text string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "details: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "details",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IJsonSchemaFromFileOptions:interface",
          "docComment": "/**\n * Options for JsonSchema.fromFile()\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IJsonSchemaFromFileOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IJsonSchemaFromFileOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IJsonSchemaFromFileOptions#dependentSchemas:member",
              "docComment": "/**\n * Other schemas that this schema references, e.g. via the \"$ref\" directive.\n *\n * @remarks\n *\n * The tree of dependent schemas may reference the same schema more than once. However, if the same schema \"id\" is used by two different JsonSchema instances, an error will be reported. This means you cannot load the same filename twice and use them both together, and you cannot have diamond dependencies on different versions of the same schema. Although technically this would be possible to support, it normally indicates an error or design problem.\n *\n * JsonSchema also does not allow circular references between schema dependencies.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dependentSchemas?: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonSchema",
                  "canonicalReference": "@rushstack/node-core-library!JsonSchema:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dependentSchemas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IJsonSchemaValidateOptions:interface",
          "docComment": "/**\n * Options for JsonSchema.validateObject()\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IJsonSchemaValidateOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IJsonSchemaValidateOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IJsonSchemaValidateOptions#customErrorHeader:member",
              "docComment": "/**\n * A custom header that will be used to report schema errors.\n *\n * @remarks\n *\n * If omitted, the default header is \"JSON validation failed:\". The error message starts with the header, followed by the full input filename, followed by the z-schema error tree. If you wish to customize all aspects of the error message, use JsonFile.loadAndValidateWithCallback() or JsonSchema.validateObjectWithCallback().\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "customErrorHeader?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "customErrorHeader",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!Import:class",
          "docComment": "/**\n * Helpers for resolving and importing Node.js modules.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Import "
            }
          ],
          "releaseTag": "Public",
          "name": "Import",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Import.lazy:member(1)",
              "docComment": "/**\n * Provides a way to improve process startup times by lazy-loading imported modules.\n *\n * @remarks\n *\n * This is a more structured wrapper for the {@link https://www.npmjs.com/package/import-lazy | import-lazy} package. It enables you to replace an import like this:\n * ```ts\n * import * as example from 'example'; // <-- 100ms load time\n *\n * if (condition) {\n *   example.doSomething();\n * }\n * ```\n *\n * ...with a pattern like this:\n * ```ts\n * const example: typeof import('example') = Import.lazy('example', require);\n *\n * if (condition) {\n *   example.doSomething(); // <-- 100ms load time occurs here, only if needed\n * }\n * ```\n *\n * The implementation relies on JavaScript's `Proxy` feature to intercept access to object members. Thus it will only work correctly with certain types of module exports. If a particular export isn't well behaved, you may need to find (or introduce) some other module in your dependency graph to apply the optimization to.\n *\n * Usage guidelines:\n *\n * - Always specify types using `typeof` as shown above.\n *\n * - Never apply lazy-loading in a way that would convert the module's type to `any`. Losing type safety seriously impacts the maintainability of the code base.\n *\n * - In cases where the non-runtime types are needed, import them separately using the `Types` suffix:\n * ```ts\n * const example: typeof import('example') = Import.lazy('example', require);\n * import type * as exampleTypes from 'example';\n * ```\n *\n * - If the imported module confusingly has the same name as its export, then use the Module suffix:\n * ```ts\n * const exampleModule: typeof import('../../logic/Example') = Import.lazy(\n *   '../../logic/Example', require);\n * import type * as exampleTypes from '../../logic/Example';\n * ```\n *\n * - If the exports cause a lot of awkwardness (e.g. too many expressions need to have `exampleModule.` inserted into them), or if some exports cannot be proxied (e.g. `Import.lazy('example', require)` returns a function signature), then do not lazy-load that module. Instead, apply lazy-loading to some other module which is better behaved.\n *\n * - It's recommended to sort imports in a standard ordering:\n * ```ts\n * // 1. external imports\n * import * as path from 'path';\n * import { Import, JsonFile, JsonObject } from '@rushstack/node-core-library';\n *\n * // 2. local imports\n * import { LocalFile } from './path/LocalFile';\n *\n * // 3. lazy-imports (which are technically variables, not imports)\n * const semver: typeof import('semver') = Import.lazy('semver', require);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static lazy(moduleName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", require: "
                },
                {
                  "kind": "Content",
                  "text": "(id: string) => unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "moduleName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "require",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "lazy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Import.resolveModule:member(1)",
              "docComment": "/**\n * This resolves a module path using similar logic as the Node.js `require.resolve()` API, but supporting extra features such as specifying the base folder.\n *\n * @remarks\n *\n * A module path is a text string that might appear in a statement such as `import { X } from \"____\";` or `const x = require(\"___\");`. The implementation is based on the popular `resolve` NPM package.\n *\n * Suppose `example` is an NPM package whose entry point is `lib/index.js`:\n * ```ts\n * // Returns \"/path/to/project/node_modules/example/lib/index.js\"\n * Import.resolveModule({ modulePath: 'example' });\n *\n * // Returns \"/path/to/project/node_modules/example/lib/other.js\"\n * Import.resolveModule({ modulePath: 'example/lib/other' });\n * ```\n *\n * If you need to determine the containing package folder (`/path/to/project/node_modules/example`), use {@link Import.resolvePackage} instead.\n *\n * @returns the absolute path of the resolved module. If {@link IImportResolveOptions.includeSystemModules} is specified and a system module is found, then its name is returned without any file path.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static resolveModule(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IImportResolveModuleOptions",
                  "canonicalReference": "@rushstack/node-core-library!IImportResolveModuleOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "resolveModule"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Import.resolvePackage:member(1)",
              "docComment": "/**\n * Performs module resolution to determine the folder where a package is installed.\n *\n * @remarks\n *\n * Suppose `example` is an NPM package whose entry point is `lib/index.js`:\n * ```ts\n * // Returns \"/path/to/project/node_modules/example\"\n * Import.resolvePackage({ packageName: 'example' });\n * ```\n *\n * If you need to resolve a module path, use {@link Import.resolveModule} instead:\n * ```ts\n * // Returns \"/path/to/project/node_modules/example/lib/index.js\"\n * Import.resolveModule({ modulePath: 'example' });\n * ```\n *\n * @returns the absolute path of the package folder. If {@link IImportResolveOptions.includeSystemModules} is specified and a system module is found, then its name is returned without any file path.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static resolvePackage(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IImportResolvePackageOptions",
                  "canonicalReference": "@rushstack/node-core-library!IImportResolvePackageOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "resolvePackage"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!INodePackageJson:interface",
          "docComment": "/**\n * An interface for accessing common fields from a package.json file whose version field may be missing.\n *\n * @remarks\n *\n * This interface is the same as {@link IPackageJson}, except that the `version` field is optional. According to the {@link https://docs.npmjs.com/files/package.json | NPM documentation} and {@link http://wiki.commonjs.org/wiki/Packages/1.0 | CommonJS Packages specification}, the `version` field is normally a required field for package.json files.\n *\n * However, NodeJS relaxes this requirement for its `require()` API. The {@link https://nodejs.org/dist/latest-v10.x/docs/api/modules.html#modules_folders_as_modules | \"Folders as Modules\" section} from the NodeJS documentation gives an example of a package.json file that has only the `name` and `main` fields. NodeJS does not consider the `version` field during resolution, so it can be omitted. Some libraries do this.\n *\n * Use the `INodePackageJson` interface when loading such files. Use `IPackageJson` for package.json files that are installed from an NPM registry, or are otherwise known to have a `version` field.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface INodePackageJson "
            }
          ],
          "releaseTag": "Public",
          "name": "INodePackageJson",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#bin:member",
              "docComment": "/**\n * The main entry point for the package.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bin?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "bin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#dependencies:member",
              "docComment": "/**\n * An array of dependencies that must always be installed for this package.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dependencies?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPackageJsonDependencyTable",
                  "canonicalReference": "@rushstack/node-core-library!IPackageJsonDependencyTable:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "dependencies",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#description:member",
              "docComment": "/**\n * A brief description of the package.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#devDependencies:member",
              "docComment": "/**\n * An array of dependencies that must only be installed for developers who will build this package.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "devDependencies?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPackageJsonDependencyTable",
                  "canonicalReference": "@rushstack/node-core-library!IPackageJsonDependencyTable:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "devDependencies",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#homepage:member",
              "docComment": "/**\n * The URL to the project's web page.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "homepage?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "homepage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#license:member",
              "docComment": "/**\n * The name of the license.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "license?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "license",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#main:member",
              "docComment": "/**\n * The path to the module file that will act as the main entry point.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "main?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "main",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#name:member",
              "docComment": "/**\n * The name of the package.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#optionalDependencies:member",
              "docComment": "/**\n * An array of optional dependencies that may be installed for this package.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "optionalDependencies?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPackageJsonDependencyTable",
                  "canonicalReference": "@rushstack/node-core-library!IPackageJsonDependencyTable:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "optionalDependencies",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#peerDependencies:member",
              "docComment": "/**\n * An array of dependencies that must be installed by a consumer of this package, but which will not be automatically installed by this package.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "peerDependencies?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPackageJsonDependencyTable",
                  "canonicalReference": "@rushstack/node-core-library!IPackageJsonDependencyTable:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "peerDependencies",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#private:member",
              "docComment": "/**\n * Indicates whether this package is allowed to be published or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "private?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "private",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#repository:member",
              "docComment": "/**\n * The URL of the project's repository.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repository?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "IPackageJsonRepository",
                  "canonicalReference": "@rushstack/node-core-library!IPackageJsonRepository:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "repository",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#resolutions:member",
              "docComment": "/**\n * A table of package version resolutions. This feature is only implemented by the Yarn package manager.\n *\n * @remarks\n *\n * See the {@link https://github.com/yarnpkg/rfcs/blob/master/implemented/0000-selective-versions-resolutions.md | 0000-selective-versions-resolutions.md RFC} for details.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolutions?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "resolutions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#scripts:member",
              "docComment": "/**\n * A table of script hooks that a package manager or build tool may invoke.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scripts?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPackageJsonScriptTable",
                  "canonicalReference": "@rushstack/node-core-library!IPackageJsonScriptTable:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "scripts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#tsdocMetadata:member",
              "docComment": "/**\n * The path to the TSDoc metadata file. This is still being standardized: https://github.com/microsoft/tsdoc/issues/7#issuecomment-442271815\n *\n * @beta\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tsdocMetadata?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Beta",
              "name": "tsdocMetadata",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#types:member",
              "docComment": "/**\n * The path to the TypeScript *.d.ts file describing the module file that will act as the main entry point.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "types?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "types",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#typings:member",
              "docComment": "/**\n * Alias for `types`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "typings?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "typings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson#version:member",
              "docComment": "/**\n * A version number conforming to the Semantic Versioning (SemVer) standard.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "version?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!InternalError:class",
          "docComment": "/**\n * An `Error` subclass that should be thrown to report an unexpected state that may indicate a software defect. An application may handle this error by instructing the end user to report an issue to the application maintainers.\n *\n * @remarks\n *\n * Do not use this class unless you intend to solicit bug reports from end users.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class InternalError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "InternalError",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@rushstack/node-core-library!InternalError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the {@link InternalError} class.\n *\n * @param message - A message describing the error. This will be assigned to {@link InternalError.unformattedMessage}. The `Error.message` field will have additional boilerplate explaining that the user has encountered a software defect.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!InternalError.breakInDebugger:member",
              "docComment": "/**\n * If true, a JavScript `debugger;` statement will be invoked whenever the `InternalError` constructor is called.\n *\n * @remarks\n *\n * Generally applications should not be catching and ignoring an `InternalError`. Instead, the error should be reported and typically the application will terminate. Thus, if `InternalError` is constructed, it's almost always something we want to examine in a debugger.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static breakInDebugger: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "breakInDebugger",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!InternalError#toString:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toString"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!InternalError#unformattedMessage:member",
              "docComment": "/**\n * The underlying error message, without the additional boilerplate for an `InternalError`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly unformattedMessage: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "unformattedMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IPackageJson:interface",
          "docComment": "/**\n * An interface for accessing common fields from a package.json file.\n *\n * @remarks\n *\n * This interface describes a package.json file format whose `name` and `version` field are required. In some situations, the `version` field is optional; in that case, use the {@link INodePackageJson} interface instead.\n *\n * More fields may be added to this interface in the future. For documentation about the package.json file format, see the {@link http://wiki.commonjs.org/wiki/Packages/1.0 | CommonJS Packages specification} and the {@link https://docs.npmjs.com/files/package.json | NPM manual page}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPackageJson extends "
            },
            {
              "kind": "Reference",
              "text": "INodePackageJson",
              "canonicalReference": "@rushstack/node-core-library!INodePackageJson:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IPackageJson",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IPackageJson#version:member",
              "docComment": "/**\n * A version number conforming to the Semantic Versioning (SemVer) standard.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "version: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IPackageJsonDependencyTable:interface",
          "docComment": "/**\n * This interface is part of the IPackageJson file format. It is used for the \"dependencies\", \"optionalDependencies\", and \"devDependencies\" fields.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPackageJsonDependencyTable "
            }
          ],
          "releaseTag": "Public",
          "name": "IPackageJsonDependencyTable",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@rushstack/node-core-library!IPackageJsonDependencyTable:index(1)",
              "docComment": "/**\n * The key is the name of a dependency. The value is a Semantic Versioning (SemVer) range specifier.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[dependencyName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dependencyName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IPackageJsonLookupParameters:interface",
          "docComment": "/**\n * Constructor parameters for {@link PackageJsonLookup}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPackageJsonLookupParameters "
            }
          ],
          "releaseTag": "Public",
          "name": "IPackageJsonLookupParameters",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IPackageJsonLookupParameters#loadExtraFields:member",
              "docComment": "/**\n * Certain package.json fields such as \"contributors\" can be very large, and may significantly increase the memory footprint for the PackageJsonLookup cache. By default, PackageJsonLookup only loads a subset of standard commonly used fields names. Set loadExtraFields=true to always return all fields.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadExtraFields?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "loadExtraFields",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IPackageJsonRepository:interface",
          "docComment": "/**\n * This interface is part of the IPackageJson file format. It is used for the \"repository\" field.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPackageJsonRepository "
            }
          ],
          "releaseTag": "Public",
          "name": "IPackageJsonRepository",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IPackageJsonRepository#directory:member",
              "docComment": "/**\n * If the project does not exist at the root of the repository, its path is specified here.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "directory?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "directory",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IPackageJsonRepository#type:member",
              "docComment": "/**\n * The source control type for the repository that hosts the project. This is typically \"git\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IPackageJsonRepository#url:member",
              "docComment": "/**\n * The URL of the repository that hosts the project.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IPackageJsonScriptTable:interface",
          "docComment": "/**\n * This interface is part of the IPackageJson file format. It is used for the \"scripts\" field.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPackageJsonScriptTable "
            }
          ],
          "releaseTag": "Public",
          "name": "IPackageJsonScriptTable",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@rushstack/node-core-library!IPackageJsonScriptTable:index(1)",
              "docComment": "/**\n * The key is the name of the script hook. The value is the script body which may be a file path or shell script command.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[scriptName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scriptName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IPackageNameParserOptions:interface",
          "docComment": "/**\n * Options that configure the validation rules used by a {@link PackageNameParser} instance.\n *\n * @remarks\n *\n * The default validation is based on the npmjs.com registry's policy for published packages, and includes these restrictions:\n *\n * - The package name cannot be longer than 214 characters.\n *\n * - The package name must not be empty.\n *\n * - Other than the `@` and `/` delimiters used for scopes, the only allowed characters are letters, numbers, `-`, `_`, and `.`.\n *\n * - The name must not start with a `.` or `_`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPackageNameParserOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IPackageNameParserOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IPackageNameParserOptions#allowUpperCase:member",
              "docComment": "/**\n * If true, allows upper-case letters in package names. This improves compatibility with some legacy private registries that still allow that.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowUpperCase?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "allowUpperCase",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IParsedPackageName:interface",
          "docComment": "/**\n * A package name that has been separated into its scope and unscoped name.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IParsedPackageName "
            }
          ],
          "releaseTag": "Public",
          "name": "IParsedPackageName",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IParsedPackageName#scope:member",
              "docComment": "/**\n * The parsed NPM scope, or an empty string if there was no scope. The scope value will always include the at-sign.\n *\n * @remarks\n *\n * For example, if the parsed input was \"\\@scope/example\", then scope would be \"\\@scope\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scope: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scope",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IParsedPackageName#unscopedName:member",
              "docComment": "/**\n * The parsed NPM package name without the scope.\n *\n * @remarks\n *\n * For example, if the parsed input was \"\\@scope/example\", then the name would be \"example\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unscopedName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "unscopedName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IParsedPackageNameOrError:interface",
          "docComment": "/**\n * Result object returned by {@link PackageName.tryParse}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IParsedPackageNameOrError extends "
            },
            {
              "kind": "Reference",
              "text": "IParsedPackageName",
              "canonicalReference": "@rushstack/node-core-library!IParsedPackageName:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IParsedPackageNameOrError",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IParsedPackageNameOrError#error:member",
              "docComment": "/**\n * If the input string could not be parsed, then this string will contain a nonempty error message. Otherwise it will be an empty string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IPathFormatConciselyOptions:interface",
          "docComment": "/**\n * Options for {@link Path.formatConcisely}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPathFormatConciselyOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IPathFormatConciselyOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IPathFormatConciselyOptions#baseFolder:member",
              "docComment": "/**\n * The base path to use when converting `pathToConvert` to a relative path.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "baseFolder: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "baseFolder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IPathFormatConciselyOptions#pathToConvert:member",
              "docComment": "/**\n * The path to be converted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pathToConvert: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pathToConvert",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IProtectableMapParameters:interface",
          "docComment": "/**\n * Constructor parameters for {@link ProtectableMap}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IProtectableMapParameters<K, V> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IProtectableMapParameters",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IProtectableMapParameters#onClear:member",
              "docComment": "/**\n * An optional hook that will be invoked before Map.clear() is performed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onClear?: "
                },
                {
                  "kind": "Content",
                  "text": "(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ProtectableMap",
                  "canonicalReference": "@rushstack/node-core-library!ProtectableMap:class"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onClear",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IProtectableMapParameters#onDelete:member",
              "docComment": "/**\n * An optional hook that will be invoked before Map.delete() is performed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onDelete?: "
                },
                {
                  "kind": "Content",
                  "text": "(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ProtectableMap",
                  "canonicalReference": "@rushstack/node-core-library!ProtectableMap:class"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>, key: K) => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onDelete",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IProtectableMapParameters#onSet:member",
              "docComment": "/**\n * An optional hook that will be invoked before Map.set() is performed.\n *\n * @remarks\n *\n * If this hook is provided, the function MUST return the `value` parameter. This provides the opportunity to modify the value before it is added to the map.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onSet?: "
                },
                {
                  "kind": "Content",
                  "text": "(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ProtectableMap",
                  "canonicalReference": "@rushstack/node-core-library!ProtectableMap:class"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>, key: K, value: V) => V"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onSet",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IStringBufferOutputOptions:interface",
          "docComment": "/**\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IStringBufferOutputOptions "
            }
          ],
          "releaseTag": "Beta",
          "name": "IStringBufferOutputOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!IStringBufferOutputOptions#normalizeSpecialCharacters:member",
              "docComment": "/**\n * If set to true, special characters like \\\\n, \\\\r, and the \\\\u001b character in color control tokens will get normalized to [-n-], [-r-], and [-x-] respectively\n *\n * This option defaults to `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalizeSpecialCharacters: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "normalizeSpecialCharacters",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!IStringBuilder:interface",
          "docComment": "/**\n * An interface for a builder object that allows a large text string to be constructed incrementally by appending small chunks.\n *\n * @remarks\n *\n * {@link StringBuilder} is the default implementation of this contract.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IStringBuilder "
            }
          ],
          "releaseTag": "Public",
          "name": "IStringBuilder",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!IStringBuilder#append:member(1)",
              "docComment": "/**\n * Append the specified text to the buffer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "append(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "append"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!IStringBuilder#toString:member(1)",
              "docComment": "/**\n * Returns a single string containing all the text that was appended to the buffer so far.\n *\n * @remarks\n *\n * This is a potentially expensive operation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toString"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!ITerminal:interface",
          "docComment": "/**\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITerminal "
            }
          ],
          "releaseTag": "Beta",
          "name": "ITerminal",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminal#registerProvider:member(1)",
              "docComment": "/**\n * Subscribe a new terminal provider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "registerProvider(provider: "
                },
                {
                  "kind": "Reference",
                  "text": "ITerminalProvider",
                  "canonicalReference": "@rushstack/node-core-library!ITerminalProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "provider",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "registerProvider"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminal#unregisterProvider:member(1)",
              "docComment": "/**\n * Unsubscribe a terminal provider. If the provider isn't subscribed, this function does nothing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unregisterProvider(provider: "
                },
                {
                  "kind": "Reference",
                  "text": "ITerminalProvider",
                  "canonicalReference": "@rushstack/node-core-library!ITerminalProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "provider",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "unregisterProvider"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminal#write:member(1)",
              "docComment": "/**\n * Write a generic message to the terminal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "write(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "write"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminal#writeDebug:member(1)",
              "docComment": "/**\n * Write a debug-level message.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeDebug(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeDebug"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminal#writeDebugLine:member(1)",
              "docComment": "/**\n * Write a debug-level message followed by a newline.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeDebugLine(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeDebugLine"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminal#writeError:member(1)",
              "docComment": "/**\n * Write an error message to the console with red text.\n *\n * @remarks\n *\n * The red color takes precedence over any other foreground colors set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeError(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeError"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminal#writeErrorLine:member(1)",
              "docComment": "/**\n * Write an error message to the console with red text, followed by a newline.\n *\n * @remarks\n *\n * The red color takes precedence over any other foreground colors set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeErrorLine(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeErrorLine"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminal#writeLine:member(1)",
              "docComment": "/**\n * Write a generic message to the terminal, followed by a newline\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeLine(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeLine"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminal#writeVerbose:member(1)",
              "docComment": "/**\n * Write a verbose-level message.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeVerbose(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeVerbose"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminal#writeVerboseLine:member(1)",
              "docComment": "/**\n * Write a verbose-level message followed by a newline.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeVerboseLine(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeVerboseLine"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminal#writeWarning:member(1)",
              "docComment": "/**\n * Write a warning message to the console with yellow text.\n *\n * @remarks\n *\n * The yellow color takes precedence over any other foreground colors set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeWarning(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeWarning"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminal#writeWarningLine:member(1)",
              "docComment": "/**\n * Write a warning message to the console with yellow text, followed by a newline.\n *\n * @remarks\n *\n * The yellow color takes precedence over any other foreground colors set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeWarningLine(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeWarningLine"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rushstack/node-core-library!ITerminalProvider:interface",
          "docComment": "/**\n * Implement the interface to create a terminal provider. Terminal providers can be registered to a {@link Terminal} instance to receive messages.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITerminalProvider "
            }
          ],
          "releaseTag": "Beta",
          "name": "ITerminalProvider",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminalProvider#eolCharacter:member",
              "docComment": "/**\n * This property should return the newline character the terminal provider expects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eolCharacter: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "eolCharacter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminalProvider#supportsColor:member",
              "docComment": "/**\n * This property should return true only if the terminal provider supports rendering console colors.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "supportsColor: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "supportsColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rushstack/node-core-library!ITerminalProvider#write:member(1)",
              "docComment": "/**\n * This function gets called on every terminal provider upon every message function call on the terminal instance.\n *\n * @param data - The terminal message.\n *\n * @param severity - The message severity. Terminal providers can route different kinds of messages to different streams and may choose to ignore verbose or debug messages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "write(data: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", severity: "
                },
                {
                  "kind": "Reference",
                  "text": "TerminalProviderSeverity",
                  "canonicalReference": "@rushstack/node-core-library!TerminalProviderSeverity:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "severity",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "write"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!JsonFile:class",
          "docComment": "/**\n * Utilities for reading/writing JSON files.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class JsonFile "
            }
          ],
          "releaseTag": "Public",
          "name": "JsonFile",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonFile.load:member(1)",
              "docComment": "/**\n * Loads a JSON file.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static load(jsonFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "load"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonFile.loadAndValidate:member(1)",
              "docComment": "/**\n * Loads a JSON file and validate its schema.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static loadAndValidate(jsonFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", jsonSchema: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonSchema",
                  "canonicalReference": "@rushstack/node-core-library!JsonSchema:class"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IJsonSchemaValidateOptions",
                  "canonicalReference": "@rushstack/node-core-library!IJsonSchemaValidateOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "jsonSchema",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "loadAndValidate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonFile.loadAndValidateAsync:member(1)",
              "docComment": "/**\n * An async version of {@link JsonFile.loadAndValidate}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static loadAndValidateAsync(jsonFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", jsonSchema: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonSchema",
                  "canonicalReference": "@rushstack/node-core-library!JsonSchema:class"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IJsonSchemaValidateOptions",
                  "canonicalReference": "@rushstack/node-core-library!IJsonSchemaValidateOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "jsonSchema",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "loadAndValidateAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonFile.loadAndValidateWithCallback:member(1)",
              "docComment": "/**\n * Loads a JSON file and validate its schema, reporting errors using a callback\n *\n * @remarks\n *\n * See JsonSchema.validateObjectWithCallback() for more info.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static loadAndValidateWithCallback(jsonFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", jsonSchema: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonSchema",
                  "canonicalReference": "@rushstack/node-core-library!JsonSchema:class"
                },
                {
                  "kind": "Content",
                  "text": ", errorCallback: "
                },
                {
                  "kind": "Content",
                  "text": "(errorInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "IJsonSchemaErrorInfo",
                  "canonicalReference": "@rushstack/node-core-library!IJsonSchemaErrorInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "jsonSchema",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "errorCallback",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 8
                  }
                }
              ],
              "name": "loadAndValidateWithCallback"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonFile.loadAndValidateWithCallbackAsync:member(1)",
              "docComment": "/**\n * An async version of {@link JsonFile.loadAndValidateWithCallback}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static loadAndValidateWithCallbackAsync(jsonFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", jsonSchema: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonSchema",
                  "canonicalReference": "@rushstack/node-core-library!JsonSchema:class"
                },
                {
                  "kind": "Content",
                  "text": ", errorCallback: "
                },
                {
                  "kind": "Content",
                  "text": "(errorInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "IJsonSchemaErrorInfo",
                  "canonicalReference": "@rushstack/node-core-library!IJsonSchemaErrorInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "jsonSchema",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "errorCallback",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 8
                  }
                }
              ],
              "name": "loadAndValidateWithCallbackAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonFile.loadAsync:member(1)",
              "docComment": "/**\n * An async version of {@link JsonFile.load}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static loadAsync(jsonFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "loadAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonFile.parseString:member(1)",
              "docComment": "/**\n * Parses a JSON file's contents.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static parseString(jsonContents: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonContents",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "parseString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonFile.save:member(1)",
              "docComment": "/**\n * Saves the file to disk. Returns false if nothing was written due to options.onlyIfChanged.\n *\n * @param jsonObject - the object to be saved\n *\n * @param jsonFilename - the file path to write\n *\n * @param options - other settings that control how the file is saved\n *\n * @returns false if ISaveJsonFileOptions.onlyIfChanged didn't save anything; true otherwise\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static save(jsonObject: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": ", jsonFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IJsonFileSaveOptions",
                  "canonicalReference": "@rushstack/node-core-library!IJsonFileSaveOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "jsonFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "save"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonFile.saveAsync:member(1)",
              "docComment": "/**\n * An async version of {@link JsonFile.save}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static saveAsync(jsonObject: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": ", jsonFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IJsonFileSaveOptions",
                  "canonicalReference": "@rushstack/node-core-library!IJsonFileSaveOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "jsonFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "saveAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonFile.stringify:member(1)",
              "docComment": "/**\n * Serializes the specified JSON object to a string buffer.\n *\n * @param jsonObject - the object to be serialized\n *\n * @param options - other settings that control serialization\n *\n * @returns a JSON string, with newlines, and indented with two spaces\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static stringify(jsonObject: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IJsonFileStringifyOptions",
                  "canonicalReference": "@rushstack/node-core-library!IJsonFileStringifyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "stringify"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonFile.updateString:member(1)",
              "docComment": "/**\n * Serializes the specified JSON object to a string buffer.\n *\n * @param jsonObject - the object to be serialized\n *\n * @param options - other settings that control serialization\n *\n * @returns a JSON string, with newlines, and indented with two spaces\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static updateString(previousJson: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", newJsonObject: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IJsonFileStringifyOptions",
                  "canonicalReference": "@rushstack/node-core-library!IJsonFileStringifyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "previousJson",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "newJsonObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "updateString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonFile.validateNoUndefinedMembers:member(1)",
              "docComment": "/**\n * Used to validate a data structure before writing. Reports an error if there are any undefined members.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static validateNoUndefinedMembers(jsonObject: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "validateNoUndefinedMembers"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rushstack/node-core-library!JsonNull:type",
          "docComment": "/**\n * The Rush Stack lint rules discourage usage of `null`. However, JSON parsers always return JavaScript's `null` to keep the two syntaxes consistent. When creating interfaces that describe JSON structures, use `JsonNull` to avoid triggering the lint rule. Do not use `JsonNull` for any other purpose.\n *\n * @remarks\n *\n * If you are designing a new JSON file format, it's a good idea to avoid `null` entirely. In most cases there are better representations that convey more information about an item that is unknown, omitted, or disabled.\n *\n * To understand why `null` is deprecated, please see the `@rushstack/eslint-plugin` documentation here:\n *\n * {@link https://www.npmjs.com/package/@rushstack/eslint-plugin#rushstackno-null}\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type JsonNull = "
            },
            {
              "kind": "Content",
              "text": "null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "JsonNull",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rushstack/node-core-library!JsonObject:type",
          "docComment": "/**\n * Represents a JSON-serializable object whose type has not been determined yet.\n *\n * @remarks\n *\n * This type is similar to `any`, except that it communicates that the object is serializable JSON.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type JsonObject = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "JsonObject",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!JsonSchema:class",
          "docComment": "/**\n * Represents a JSON schema that can be used to validate JSON data files loaded by the JsonFile class.\n *\n * @remarks\n *\n * The schema itself is normally loaded and compiled later, only if it is actually required to validate an input. To avoid schema errors at runtime, it's recommended to create a unit test that calls JsonSchema.ensureCompiled() for each of your schema objects.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class JsonSchema "
            }
          ],
          "releaseTag": "Public",
          "name": "JsonSchema",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonSchema#ensureCompiled:member(1)",
              "docComment": "/**\n * If not already done, this loads the schema from disk and compiles it.\n *\n * @remarks\n *\n * Any dependencies will be compiled as well.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ensureCompiled(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "ensureCompiled"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonSchema.fromFile:member(1)",
              "docComment": "/**\n * Registers a JsonSchema that will be loaded from a file on disk.\n *\n * @remarks\n *\n * NOTE: An error occurs if the file does not exist; however, the file itself is not loaded or validated until it the schema is actually used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromFile(filename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IJsonSchemaFromFileOptions",
                  "canonicalReference": "@rushstack/node-core-library!IJsonSchemaFromFileOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "JsonSchema",
                  "canonicalReference": "@rushstack/node-core-library!JsonSchema:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "fromFile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonSchema.fromLoadedObject:member(1)",
              "docComment": "/**\n * Registers a JsonSchema that will be loaded from a file on disk.\n *\n * @remarks\n *\n * NOTE: An error occurs if the file does not exist; however, the file itself is not loaded or validated until it the schema is actually used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromLoadedObject(schemaObject: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "JsonSchema",
                  "canonicalReference": "@rushstack/node-core-library!JsonSchema:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "schemaObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromLoadedObject"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!JsonSchema#shortName:member",
              "docComment": "/**\n * Returns a short name for this schema, for use in error messages.\n *\n * @remarks\n *\n * If the schema was loaded from a file, then the base filename is used. Otherwise, the \"id\" field is used if available.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get shortName(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shortName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonSchema#validateObject:member(1)",
              "docComment": "/**\n * Validates the specified JSON object against this JSON schema. If the validation fails, an exception will be thrown.\n *\n * @param jsonObject - The JSON data to be validated\n *\n * @param filenameForErrors - The filename that the JSON data was available, or an empty string if not applicable\n *\n * @param options - Other options that control the validation\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "validateObject(jsonObject: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": ", filenameForErrors: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IJsonSchemaValidateOptions",
                  "canonicalReference": "@rushstack/node-core-library!IJsonSchemaValidateOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "filenameForErrors",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "validateObject"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!JsonSchema#validateObjectWithCallback:member(1)",
              "docComment": "/**\n * Validates the specified JSON object against this JSON schema. If the validation fails, a callback is called for each validation error.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "validateObjectWithCallback(jsonObject: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonObject",
                  "canonicalReference": "@rushstack/node-core-library!JsonObject:type"
                },
                {
                  "kind": "Content",
                  "text": ", errorCallback: "
                },
                {
                  "kind": "Content",
                  "text": "(errorInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "IJsonSchemaErrorInfo",
                  "canonicalReference": "@rushstack/node-core-library!IJsonSchemaErrorInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "errorCallback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "validateObjectWithCallback"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!LegacyAdapters:class",
          "docComment": "/**\n * Helper functions used when interacting with APIs that do not follow modern coding practices.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class LegacyAdapters "
            }
          ],
          "releaseTag": "Public",
          "name": "LegacyAdapters",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!LegacyAdapters.convertCallbackToPromise:member(1)",
              "docComment": "/**\n * This function wraps a function with a callback in a promise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static convertCallbackToPromise<TResult, TError>(fn: "
                },
                {
                  "kind": "Content",
                  "text": "(cb: "
                },
                {
                  "kind": "Reference",
                  "text": "LegacyCallback",
                  "canonicalReference": "@rushstack/node-core-library!LegacyCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<TResult, TError>) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TResult>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TResult",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TError",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "convertCallbackToPromise"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!LegacyAdapters.convertCallbackToPromise:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static convertCallbackToPromise<TResult, TError, TArg1>(fn: "
                },
                {
                  "kind": "Content",
                  "text": "(arg1: TArg1, cb: "
                },
                {
                  "kind": "Reference",
                  "text": "LegacyCallback",
                  "canonicalReference": "@rushstack/node-core-library!LegacyCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<TResult, TError>) => void"
                },
                {
                  "kind": "Content",
                  "text": ", arg1: "
                },
                {
                  "kind": "Content",
                  "text": "TArg1"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TResult>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "arg1",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TResult",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TError",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TArg1",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "convertCallbackToPromise"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!LegacyAdapters.convertCallbackToPromise:member(3)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static convertCallbackToPromise<TResult, TError, TArg1, TArg2>(fn: "
                },
                {
                  "kind": "Content",
                  "text": "(arg1: TArg1, arg2: TArg2, cb: "
                },
                {
                  "kind": "Reference",
                  "text": "LegacyCallback",
                  "canonicalReference": "@rushstack/node-core-library!LegacyCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<TResult, TError>) => void"
                },
                {
                  "kind": "Content",
                  "text": ", arg1: "
                },
                {
                  "kind": "Content",
                  "text": "TArg1"
                },
                {
                  "kind": "Content",
                  "text": ", arg2: "
                },
                {
                  "kind": "Content",
                  "text": "TArg2"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TResult>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "arg1",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "arg2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TResult",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TError",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TArg1",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TArg2",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "convertCallbackToPromise"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!LegacyAdapters.convertCallbackToPromise:member(4)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static convertCallbackToPromise<TResult, TError, TArg1, TArg2, TArg3>(fn: "
                },
                {
                  "kind": "Content",
                  "text": "(arg1: TArg1, arg2: TArg2, arg3: TArg3, cb: "
                },
                {
                  "kind": "Reference",
                  "text": "LegacyCallback",
                  "canonicalReference": "@rushstack/node-core-library!LegacyCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<TResult, TError>) => void"
                },
                {
                  "kind": "Content",
                  "text": ", arg1: "
                },
                {
                  "kind": "Content",
                  "text": "TArg1"
                },
                {
                  "kind": "Content",
                  "text": ", arg2: "
                },
                {
                  "kind": "Content",
                  "text": "TArg2"
                },
                {
                  "kind": "Content",
                  "text": ", arg3: "
                },
                {
                  "kind": "Content",
                  "text": "TArg3"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TResult>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 4,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "arg1",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "arg2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "arg3",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TResult",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TError",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TArg1",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TArg2",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TArg3",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "convertCallbackToPromise"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!LegacyAdapters.convertCallbackToPromise:member(5)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static convertCallbackToPromise<TResult, TError, TArg1, TArg2, TArg3, TArg4>(fn: "
                },
                {
                  "kind": "Content",
                  "text": "(arg1: TArg1, arg2: TArg2, arg3: TArg3, arg4: TArg4, cb: "
                },
                {
                  "kind": "Reference",
                  "text": "LegacyCallback",
                  "canonicalReference": "@rushstack/node-core-library!LegacyCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<TResult, TError>) => void"
                },
                {
                  "kind": "Content",
                  "text": ", arg1: "
                },
                {
                  "kind": "Content",
                  "text": "TArg1"
                },
                {
                  "kind": "Content",
                  "text": ", arg2: "
                },
                {
                  "kind": "Content",
                  "text": "TArg2"
                },
                {
                  "kind": "Content",
                  "text": ", arg3: "
                },
                {
                  "kind": "Content",
                  "text": "TArg3"
                },
                {
                  "kind": "Content",
                  "text": ", arg4: "
                },
                {
                  "kind": "Content",
                  "text": "TArg4"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TResult>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 5,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "arg1",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "arg2",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "arg3",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "arg4",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TResult",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TError",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TArg1",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TArg2",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TArg3",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TArg4",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "convertCallbackToPromise"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!LegacyAdapters.scrubError:member(1)",
              "docComment": "/**\n * Normalizes an object into an `Error` object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static scrubError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string | any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "scrubError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!LegacyAdapters.sortStable:member(1)",
              "docComment": "/**\n * Prior to Node 11.x, the `Array.sort()` algorithm is not guaranteed to be stable. If you need a stable sort, you can use `sortStable()` as a workaround.\n *\n * @remarks\n *\n * On NodeJS 11.x and later, this method simply calls the native `Array.sort()`. For earlier versions, it uses an implementation of Timsort, which is the same algorithm used by modern NodeJS.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static sortStable<T>(array: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ", compare?: "
                },
                {
                  "kind": "Content",
                  "text": "(a: T, b: T) => number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "compare",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "sortStable"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rushstack/node-core-library!LegacyCallback:type",
          "docComment": "/**\n * Callback used by {@link LegacyAdapters}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LegacyCallback<TResult, TError> = "
            },
            {
              "kind": "Content",
              "text": "(error: TError | null | undefined, result: TResult) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LegacyCallback",
          "typeParameters": [
            {
              "typeParameterName": "TResult",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TError",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!LockFile:class",
          "docComment": "/**\n * The `LockFile` implements a file-based mutex for synchronizing access to a shared resource between multiple Node.js processes. It is not recommended for synchronization solely within a single Node.js process.\n *\n * @remarks\n *\n * The implementation works on Windows, Mac, and Linux without requiring any native helpers. On non-Windows systems, the algorithm requires access to the `ps` shell command. On Linux, it requires access the `/proc/${pidString}/stat` filesystem.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class LockFile "
            }
          ],
          "releaseTag": "Public",
          "name": "LockFile",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!LockFile.acquire:member(1)",
              "docComment": "/**\n * Attempts to create the lockfile. Will continue to loop at every 100ms until the lock becomes available or the maxWaitMs is surpassed.\n *\n * @remarks\n *\n * This function is subject to starvation, whereby it does not ensure that the process that has been waiting the longest to acquire the lock will get it first. This means that a process could theoretically wait for the lock forever, while other processes skipped it in line and acquired the lock first.\n *\n * @param resourceFolder - The folder where the lock file will be created\n *\n * @param resourceName - An alphanumeric name that describes the resource being locked. This will become the filename of the temporary file created to manage the lock.\n *\n * @param maxWaitMs - The maximum number of milliseconds to wait for the lock before reporting an error\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static acquire(resourceFolder: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", resourceName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", maxWaitMs?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "LockFile",
                  "canonicalReference": "@rushstack/node-core-library!LockFile:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "resourceFolder",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "resourceName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "maxWaitMs",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "acquire"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!LockFile#dirtyWhenAcquired:member",
              "docComment": "/**\n * Returns the initial state of the lock. This can be used to detect if the previous process was terminated before releasing the resource.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get dirtyWhenAcquired(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dirtyWhenAcquired",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!LockFile#filePath:member",
              "docComment": "/**\n * Returns the absolute path to the lockfile\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get filePath(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "filePath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!LockFile.getLockFilePath:member(1)",
              "docComment": "/**\n * Returns the path of the lockfile that will be created when a lock is successfully acquired.\n *\n * @param resourceFolder - The folder where the lock file will be created\n *\n * @param resourceName - An alphanumeric name that describes the resource being locked. This will become the filename of the temporary file created to manage the lock.\n *\n * @param pid - The PID for the current Node.js process (`process.pid`), which is used by the locking algorithm.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getLockFilePath(resourceFolder: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", resourceName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", pid?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "resourceFolder",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "resourceName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "pid",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "getLockFilePath"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!LockFile#isReleased:member",
              "docComment": "/**\n * Returns true if this lock is currently being held.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isReleased(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isReleased",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!LockFile#release:member(1)",
              "docComment": "/**\n * Unlocks a file and removes it from disk. This can only be called once.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "release(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "release"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!LockFile.tryAcquire:member(1)",
              "docComment": "/**\n * Attempts to create a lockfile with the given filePath.\n *\n * @param resourceFolder - The folder where the lock file will be created\n *\n * @param resourceName - An alphanumeric name that describes the resource being locked. This will become the filename of the temporary file created to manage the lock.\n *\n * @returns If successful, returns a `LockFile` instance. If unable to get a lock, returns `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static tryAcquire(resourceFolder: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", resourceName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "LockFile",
                  "canonicalReference": "@rushstack/node-core-library!LockFile:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "resourceFolder",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "resourceName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "tryAcquire"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!MapExtensions:class",
          "docComment": "/**\n * Helper functions for working with the `Map<K, V>` data type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MapExtensions "
            }
          ],
          "releaseTag": "Public",
          "name": "MapExtensions",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!MapExtensions.mergeFromMap:member(1)",
              "docComment": "/**\n * Adds all the (key, value) pairs from the source map into the target map.\n *\n * @remarks\n *\n * This function modifies targetMap. Any existing keys will be overwritten.\n *\n * @param targetMap - The map that entries will be added to\n *\n * @param sourceMap - The map containing the entries to be added\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static mergeFromMap<K, V>(targetMap: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>"
                },
                {
                  "kind": "Content",
                  "text": ", sourceMap: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMap",
                  "canonicalReference": "!ReadonlyMap:interface"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "targetMap",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "sourceMap",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "V",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "mergeFromMap"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!MapExtensions.toObject:member(1)",
              "docComment": "/**\n * Converts a string-keyed map to an object.\n *\n * @remarks\n *\n * This function has the same effect as Object.fromEntries(map.entries()) in supported versions of Node (\\>= 12.0.0).\n *\n * @param map - The map that the object properties will be sourced from\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static toObject<TValue>(map: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, TValue>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: TValue;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "map",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TValue",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "toObject"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@rushstack/node-core-library!NewlineKind:enum",
          "docComment": "/**\n * Enumeration controlling conversion of newline characters.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum NewlineKind "
            }
          ],
          "releaseTag": "Public",
          "name": "NewlineKind",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!NewlineKind.CrLf:member",
              "docComment": "/**\n * Windows-style newlines\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CrLf = "
                },
                {
                  "kind": "Content",
                  "text": "\"\\r\\n\""
                }
              ],
              "releaseTag": "Public",
              "name": "CrLf",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!NewlineKind.Lf:member",
              "docComment": "/**\n * POSIX-style newlines\n *\n * @remarks\n *\n * POSIX is a registered trademark of the Institute of Electrical and Electronic Engineers, Inc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Lf = "
                },
                {
                  "kind": "Content",
                  "text": "\"\\n\""
                }
              ],
              "releaseTag": "Public",
              "name": "Lf",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!NewlineKind.OsDefault:member",
              "docComment": "/**\n * Default newline type for this operating system (`os.EOL`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OsDefault = "
                },
                {
                  "kind": "Content",
                  "text": "\"os\""
                }
              ],
              "releaseTag": "Public",
              "name": "OsDefault",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!PackageJsonLookup:class",
          "docComment": "/**\n * This class provides methods for finding the nearest \"package.json\" for a folder and retrieving the name of the package. The results are cached.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PackageJsonLookup "
            }
          ],
          "releaseTag": "Public",
          "name": "PackageJsonLookup",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@rushstack/node-core-library!PackageJsonLookup:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `PackageJsonLookup` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(parameters?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPackageJsonLookupParameters",
                  "canonicalReference": "@rushstack/node-core-library!IPackageJsonLookupParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "parameters",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageJsonLookup#clearCache:member(1)",
              "docComment": "/**\n * Clears the internal file cache.\n *\n * @remarks\n *\n * Call this method if changes have been made to the package.json files on disk.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearCache(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearCache"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!PackageJsonLookup.instance:member",
              "docComment": "/**\n * A singleton instance of `PackageJsonLookup`, which is useful for short-lived processes that can reasonably assume that the file system will not be modified after the cache is populated.\n *\n * @remarks\n *\n * For long-running processes that need to clear the cache at appropriate times, it is recommended to create your own instance of `PackageJsonLookup` instead of relying on this instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static get instance(): "
                },
                {
                  "kind": "Reference",
                  "text": "PackageJsonLookup",
                  "canonicalReference": "@rushstack/node-core-library!PackageJsonLookup:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "instance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageJsonLookup#loadNodePackageJson:member(1)",
              "docComment": "/**\n * This function is similar to {@link PackageJsonLookup.loadPackageJson}, except that it does not report an error if the `version` field is missing from the package.json file.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadNodePackageJson(jsonFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "INodePackageJson",
                  "canonicalReference": "@rushstack/node-core-library!INodePackageJson:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "loadNodePackageJson"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageJsonLookup.loadOwnPackageJson:member(1)",
              "docComment": "/**\n * A helper for loading the caller's own package.json file.\n *\n * @remarks\n *\n * This function provides a concise and efficient way for an NPM package to report metadata about itself. For example, a tool might want to report its version.\n *\n * The `loadOwnPackageJson()` probes upwards from the caller's folder, expecting to find a package.json file, which is assumed to be the caller's package. The result is cached, under the assumption that a tool's own package.json (and intermediary folders) will never change during the lifetime of the process.\n *\n * @param dirnameOfCaller - The NodeJS `__dirname` macro for the caller.\n *\n * @returns This function always returns a valid `IPackageJson` object. If any problems are encountered during loading, an exception will be thrown instead.\n *\n * @example\n * ```ts\n * // Report the version of our NPM package\n * const myPackageVersion: string = PackageJsonLookup.loadOwnPackageJson(__dirname).version;\n * console.log(`Cool Tool - Version ${myPackageVersion}`);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static loadOwnPackageJson(dirnameOfCaller: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IPackageJson",
                  "canonicalReference": "@rushstack/node-core-library!IPackageJson:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dirnameOfCaller",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "loadOwnPackageJson"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageJsonLookup#loadPackageJson:member(1)",
              "docComment": "/**\n * Loads the specified package.json file, if it is not already present in the cache.\n *\n * @remarks\n *\n * Unless {@link IPackageJsonLookupParameters.loadExtraFields} was specified, the returned IPackageJson object will contain a subset of essential fields. The returned object should be considered to be immutable; the caller must never modify it.\n *\n * @param jsonFilename - a relative or absolute path to a package.json file\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadPackageJson(jsonFilename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IPackageJson",
                  "canonicalReference": "@rushstack/node-core-library!IPackageJson:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "jsonFilename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "loadPackageJson"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageJsonLookup#tryGetPackageFolderFor:member(1)",
              "docComment": "/**\n * Returns the absolute path of a folder containing a package.json file, by looking upwards from the specified fileOrFolderPath. If no package.json can be found, undefined is returned.\n *\n * @remarks\n *\n * The fileOrFolderPath is not required to actually exist on disk. The fileOrFolderPath itself can be the return value, if it is a folder containing a package.json file. Both positive and negative lookup results are cached.\n *\n * @param fileOrFolderPath - a relative or absolute path to a source file or folder that may be part of a package\n *\n * @returns an absolute path to a folder containing a package.json file\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryGetPackageFolderFor(fileOrFolderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fileOrFolderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "tryGetPackageFolderFor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageJsonLookup#tryGetPackageJsonFilePathFor:member(1)",
              "docComment": "/**\n * If the specified file or folder is part of a package, this returns the absolute path to the associated package.json file.\n *\n * @remarks\n *\n * The package folder is determined using the same algorithm as {@link PackageJsonLookup.tryGetPackageFolderFor}.\n *\n * @param fileOrFolderPath - a relative or absolute path to a source file or folder that may be part of a package\n *\n * @returns an absolute path to * package.json file\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryGetPackageJsonFilePathFor(fileOrFolderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fileOrFolderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "tryGetPackageJsonFilePathFor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageJsonLookup#tryLoadNodePackageJsonFor:member(1)",
              "docComment": "/**\n * This function is similar to {@link PackageJsonLookup.tryLoadPackageJsonFor}, except that it does not report an error if the `version` field is missing from the package.json file.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryLoadNodePackageJsonFor(fileOrFolderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "INodePackageJson",
                  "canonicalReference": "@rushstack/node-core-library!INodePackageJson:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fileOrFolderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "tryLoadNodePackageJsonFor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageJsonLookup#tryLoadPackageJsonFor:member(1)",
              "docComment": "/**\n * If the specified file or folder is part of a package, this loads and returns the associated package.json file.\n *\n * @remarks\n *\n * The package folder is determined using the same algorithm as {@link PackageJsonLookup.tryGetPackageFolderFor}.\n *\n * @param fileOrFolderPath - a relative or absolute path to a source file or folder that may be part of a package\n *\n * @returns an IPackageJson object, or undefined if the fileOrFolderPath does not belong to a package\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryLoadPackageJsonFor(fileOrFolderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IPackageJson",
                  "canonicalReference": "@rushstack/node-core-library!IPackageJson:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fileOrFolderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "tryLoadPackageJsonFor"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!PackageName:class",
          "docComment": "/**\n * Provides basic operations for validating and manipulating NPM package names such as `my-package` or `@scope/my-package`.\n *\n * @remarks\n *\n * This is the default implementation of {@link PackageNameParser}, exposed as a convenient static class. If you need to configure the parsing rules, use `PackageNameParser` instead.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PackageName "
            }
          ],
          "releaseTag": "Public",
          "name": "PackageName",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageName.combineParts:member(1)",
              "docComment": "/**\n * Combines an optional package scope with an unscoped root name.\n *\n * @param scope - Must be either an empty string, or a scope name such as \"\\@example\"\n *\n * @param unscopedName - Must be a nonempty package name that does not contain a scope\n *\n * @returns A full package name such as \"\\@example/some-library\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static combineParts(scope: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", unscopedName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scope",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "unscopedName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "combineParts"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageName.getScope:member(1)",
              "docComment": "/**\n * The parsed NPM scope, or an empty string if there was no scope. The scope value will always include the at-sign.\n *\n * @remarks\n *\n * For example, if the parsed input was \"\\@scope/example\", then scope would be \"\\@scope\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getScope(packageName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "packageName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getScope"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageName.getUnscopedName:member(1)",
              "docComment": "/**\n * The parsed NPM package name without the scope.\n *\n * @remarks\n *\n * For example, if the parsed input was \"\\@scope/example\", then the name would be \"example\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getUnscopedName(packageName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "packageName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getUnscopedName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageName.isValidName:member(1)",
              "docComment": "/**\n * Returns true if the specified package name is valid, or false otherwise.\n *\n * @remarks\n *\n * This function will not throw an exception.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isValidName(packageName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "packageName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isValidName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageName.parse:member(1)",
              "docComment": "/**\n * Same as {@link PackageName.tryParse}, except this throws an exception if the input cannot be parsed.\n *\n * @remarks\n *\n * The packageName must not be an empty string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static parse(packageName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IParsedPackageName",
                  "canonicalReference": "@rushstack/node-core-library!IParsedPackageName:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "packageName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "parse"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageName.tryParse:member(1)",
              "docComment": "/**\n * This attempts to parse a package name that may include a scope component. The packageName must not be an empty string.\n *\n * @remarks\n *\n * This function will not throw an exception.\n *\n * @returns an {@link IParsedPackageNameOrError} structure whose `error` property will be nonempty if the string could not be parsed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static tryParse(packageName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IParsedPackageNameOrError",
                  "canonicalReference": "@rushstack/node-core-library!IParsedPackageNameOrError:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "packageName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "tryParse"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageName.validate:member(1)",
              "docComment": "/**\n * Throws an exception if the specified name is not a valid package name. The packageName must not be an empty string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static validate(packageName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "packageName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "validate"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!PackageNameParser:class",
          "docComment": "/**\n * A configurable parser for validating and manipulating NPM package names such as `my-package` or `@scope/my-package`.\n *\n * @remarks\n *\n * If you do not need to customize the parser configuration, it is recommended to use {@link PackageName} which exposes these operations as a simple static class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PackageNameParser "
            }
          ],
          "releaseTag": "Public",
          "name": "PackageNameParser",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@rushstack/node-core-library!PackageNameParser:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `PackageNameParser` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IPackageNameParserOptions",
                  "canonicalReference": "@rushstack/node-core-library!IPackageNameParserOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageNameParser#combineParts:member(1)",
              "docComment": "/**\n * Combines an optional package scope with an unscoped root name.\n *\n * @param scope - Must be either an empty string, or a scope name such as \"\\@example\"\n *\n * @param unscopedName - Must be a nonempty package name that does not contain a scope\n *\n * @returns A full package name such as \"\\@example/some-library\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "combineParts(scope: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", unscopedName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scope",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "unscopedName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "combineParts"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageNameParser#getScope:member(1)",
              "docComment": "/**\n * The parsed NPM scope, or an empty string if there was no scope. The scope value will always include the at-sign.\n *\n * @remarks\n *\n * For example, if the parsed input was \"\\@scope/example\", then scope would be \"\\@scope\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScope(packageName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "packageName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getScope"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageNameParser#getUnscopedName:member(1)",
              "docComment": "/**\n * The parsed NPM package name without the scope.\n *\n * @remarks\n *\n * For example, if the parsed input was \"\\@scope/example\", then the name would be \"example\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getUnscopedName(packageName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "packageName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getUnscopedName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageNameParser#isValidName:member(1)",
              "docComment": "/**\n * Returns true if the specified package name is valid, or false otherwise.\n *\n * @remarks\n *\n * This function will not throw an exception.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isValidName(packageName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "packageName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isValidName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageNameParser#parse:member(1)",
              "docComment": "/**\n * Same as {@link PackageName.tryParse}, except this throws an exception if the input cannot be parsed.\n *\n * @remarks\n *\n * The packageName must not be an empty string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "parse(packageName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IParsedPackageName",
                  "canonicalReference": "@rushstack/node-core-library!IParsedPackageName:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "packageName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "parse"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageNameParser#tryParse:member(1)",
              "docComment": "/**\n * This attempts to parse a package name that may include a scope component. The packageName must not be an empty string.\n *\n * @remarks\n *\n * This function will not throw an exception.\n *\n * @returns an {@link IParsedPackageNameOrError} structure whose `error` property will be nonempty if the string could not be parsed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryParse(packageName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IParsedPackageNameOrError",
                  "canonicalReference": "@rushstack/node-core-library!IParsedPackageNameOrError:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "packageName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "tryParse"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!PackageNameParser#validate:member(1)",
              "docComment": "/**\n * Throws an exception if the specified name is not a valid package name. The packageName must not be an empty string.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "validate(packageName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "packageName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "validate"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!Path:class",
          "docComment": "/**\n * Common operations for manipulating file and directory paths.\n *\n * @remarks\n *\n * This API is intended to eventually be a complete replacement for the NodeJS \"path\" API.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Path "
            }
          ],
          "releaseTag": "Public",
          "name": "Path",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Path.convertToBackslashes:member(1)",
              "docComment": "/**\n * Replaces POSIX-style slashes with Windows-style backslashes\n *\n * @remarks\n *\n * POSIX is a registered trademark of the Institute of Electrical and Electronic Engineers, Inc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static convertToBackslashes(inputPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "inputPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "convertToBackslashes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Path.convertToSlashes:member(1)",
              "docComment": "/**\n * Replaces Windows-style backslashes with POSIX-style slashes.\n *\n * @remarks\n *\n * POSIX is a registered trademark of the Institute of Electrical and Electronic Engineers, Inc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static convertToSlashes(inputPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "inputPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "convertToSlashes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Path.formatConcisely:member(1)",
              "docComment": "/**\n * Formats a path to look nice for reporting purposes.\n *\n * @remarks\n *\n * If `pathToConvert` is under the `baseFolder`, then it will be converted to a relative with the `./` prefix. Otherwise, it will be converted to an absolute path.\n *\n * Backslashes will be converted to slashes, unless the path starts with an OS-specific string like `C:\\`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static formatConcisely(options: "
                },
                {
                  "kind": "Reference",
                  "text": "IPathFormatConciselyOptions",
                  "canonicalReference": "@rushstack/node-core-library!IPathFormatConciselyOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "formatConcisely"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Path.isDownwardRelative:member(1)",
              "docComment": "/**\n * Returns true if the specified path is a relative path and does not use `..` to walk upwards.\n *\n * @example\n * ```ts\n * // These evaluate to true\n * isDownwardRelative('folder');\n * isDownwardRelative('file');\n * isDownwardRelative('folder/');\n * isDownwardRelative('./folder/');\n * isDownwardRelative('./folder/file');\n *\n * // These evaluate to false\n * isDownwardRelative('../folder');\n * isDownwardRelative('folder/../file');\n * isDownwardRelative('/folder/file');\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isDownwardRelative(inputPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "inputPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isDownwardRelative"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Path.isEqual:member(1)",
              "docComment": "/**\n * Returns true if `path1` and `path2` refer to the same underlying path.\n *\n * @remarks\n *\n * The comparison is performed using `path.relative()`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isEqual(path1: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", path2: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "path1",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "path2",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "isEqual"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Path.isUnder:member(1)",
              "docComment": "/**\n * Returns true if \"childPath\" is located inside the \"parentFolderPath\" folder or one of its child folders. Note that \"parentFolderPath\" is not considered to be under itself. The \"childPath\" can refer to any type of file system object.\n *\n * @remarks\n *\n * The indicated file/folder objects are not required to actually exist on disk. For example, \"parentFolderPath\" is interpreted as a folder name even if it refers to a file. If the paths are relative, they will first be resolved using path.resolve().\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isUnder(childPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", parentFolderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "childPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "parentFolderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "isUnder"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Path.isUnderOrEqual:member(1)",
              "docComment": "/**\n * Returns true if \"childPath\" is equal to \"parentFolderPath\", or if it is inside that folder or one of its children. The \"childPath\" can refer to any type of file system object.\n *\n * @remarks\n *\n * The indicated file/folder objects are not required to actually exist on disk. For example, \"parentFolderPath\" is interpreted as a folder name even if it refers to a file. If the paths are relative, they will first be resolved using path.resolve().\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isUnderOrEqual(childPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", parentFolderPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "childPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "parentFolderPath",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "isUnderOrEqual"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@rushstack/node-core-library!PosixModeBits:enum",
          "docComment": "/**\n * An integer value used to specify file permissions for POSIX-like operating systems.\n *\n * @remarks\n *\n * This bitfield corresponds to the \"mode_t\" structure described in this document: http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_stat.h.html\n *\n * It is used with NodeJS APIs such as fs.Stat.mode and fs.chmodSync(). These values represent a set of permissions and can be combined using bitwise arithmetic.\n *\n * POSIX is a registered trademark of the Institute of Electrical and Electronic Engineers, Inc.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum PosixModeBits "
            }
          ],
          "releaseTag": "Public",
          "name": "PosixModeBits",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!PosixModeBits.AllExecute:member",
              "docComment": "/**\n * An alias combining OthersExecute, GroupExecute, and UserExecute permission bits.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AllExecute = "
                },
                {
                  "kind": "Content",
                  "text": "73"
                }
              ],
              "releaseTag": "Public",
              "name": "AllExecute",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!PosixModeBits.AllRead:member",
              "docComment": "/**\n * An alias combining OthersRead, GroupRead, and UserRead permission bits.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AllRead = "
                },
                {
                  "kind": "Content",
                  "text": "292"
                }
              ],
              "releaseTag": "Public",
              "name": "AllRead",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!PosixModeBits.AllWrite:member",
              "docComment": "/**\n * An alias combining OthersWrite, GroupWrite, and UserWrite permission bits.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AllWrite = "
                },
                {
                  "kind": "Content",
                  "text": "146"
                }
              ],
              "releaseTag": "Public",
              "name": "AllWrite",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!PosixModeBits.GroupExecute:member",
              "docComment": "/**\n * Indicates that users belonging to the item's group can execute the item (if it is a file) or search the item (if it is a directory).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "GroupExecute = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "releaseTag": "Public",
              "name": "GroupExecute",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!PosixModeBits.GroupRead:member",
              "docComment": "/**\n * Indicates that users belonging to the item's group can read the item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "GroupRead = "
                },
                {
                  "kind": "Content",
                  "text": "32"
                }
              ],
              "releaseTag": "Public",
              "name": "GroupRead",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!PosixModeBits.GroupWrite:member",
              "docComment": "/**\n * Indicates that users belonging to the item's group can modify the item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "GroupWrite = "
                },
                {
                  "kind": "Content",
                  "text": "16"
                }
              ],
              "releaseTag": "Public",
              "name": "GroupWrite",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!PosixModeBits.None:member",
              "docComment": "/**\n * A zero value where no permissions bits are set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "None = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "None",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!PosixModeBits.OthersExecute:member",
              "docComment": "/**\n * Indicates that other users (besides the item's owner user or group) can execute the item (if it is a file) or search the item (if it is a directory).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OthersExecute = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "OthersExecute",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!PosixModeBits.OthersRead:member",
              "docComment": "/**\n * Indicates that other users (besides the item's owner user or group) can read the item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OthersRead = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "OthersRead",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!PosixModeBits.OthersWrite:member",
              "docComment": "/**\n * Indicates that other users (besides the item's owner user or group) can modify the item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OthersWrite = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "OthersWrite",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!PosixModeBits.UserExecute:member",
              "docComment": "/**\n * Indicates that the item's owner can execute the item (if it is a file) or search the item (if it is a directory).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserExecute = "
                },
                {
                  "kind": "Content",
                  "text": "64"
                }
              ],
              "releaseTag": "Public",
              "name": "UserExecute",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!PosixModeBits.UserRead:member",
              "docComment": "/**\n * Indicates that the item's owner can read the item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserRead = "
                },
                {
                  "kind": "Content",
                  "text": "256"
                }
              ],
              "releaseTag": "Public",
              "name": "UserRead",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!PosixModeBits.UserWrite:member",
              "docComment": "/**\n * Indicates that the item's owner can modify the item.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UserWrite = "
                },
                {
                  "kind": "Content",
                  "text": "128"
                }
              ],
              "releaseTag": "Public",
              "name": "UserWrite",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!ProtectableMap:class",
          "docComment": "/**\n * The ProtectableMap provides an easy way for an API to expose a `Map<K, V>` property while intercepting and validating any write operations that are performed by consumers of the API.\n *\n * @remarks\n *\n * The ProtectableMap itself is intended to be a private object that only its owner can access directly. Any operations performed directly on the ProtectableMap will bypass the hooks and any validation they perform. The public property that is exposed to API consumers should return {@link ProtectableMap.protectedView} instead.\n *\n * For example, suppose you want to share your `Map<string, number>` data structure, but you want to enforce that the key must always be an upper case string: You could use the onSet() hook to validate the keys and throw an exception if the key is not uppercase.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ProtectableMap<K, V> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ProtectableMap",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@rushstack/node-core-library!ProtectableMap:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ProtectableMap` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(parameters: "
                },
                {
                  "kind": "Reference",
                  "text": "IProtectableMapParameters",
                  "canonicalReference": "@rushstack/node-core-library!IProtectableMapParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "parameters",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!ProtectableMap#clear:member(1)",
              "docComment": "/**\n * Removes all entries from the map. This operation does NOT invoke the ProtectableMap onClear() hook.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!ProtectableMap#delete:member(1)",
              "docComment": "/**\n * Removes the specified key from the map. This operation does NOT invoke the ProtectableMap onDelete() hook.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete(key: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "delete"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!ProtectableMap#forEach:member(1)",
              "docComment": "/**\n * Performs an operation for each (key, value) entries in the map.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forEach(callbackfn: "
                },
                {
                  "kind": "Content",
                  "text": "(value: V, key: K, map: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>) => void"
                },
                {
                  "kind": "Content",
                  "text": ", thisArg?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "callbackfn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "thisArg",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "forEach"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!ProtectableMap#get:member(1)",
              "docComment": "/**\n * Retrieves the value for the specified key.\n *\n * @returns undefined if the value is undefined OR if the key is missing; otherwise returns the value associated with the key.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(key: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "V | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!ProtectableMap#has:member(1)",
              "docComment": "/**\n * Returns true if the specified key belongs to the map.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "has(key: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "has"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!ProtectableMap#protectedView:member",
              "docComment": "/**\n * The owner of the protectable map should return this object via its public API.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get protectedView(): "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "protectedView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!ProtectableMap#set:member(1)",
              "docComment": "/**\n * Sets a value for the specified key. This operation does NOT invoke the ProtectableMap onSet() hook.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(key: "
                },
                {
                  "kind": "Content",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "V"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!ProtectableMap#size:member",
              "docComment": "/**\n * Returns the number of (key, value) entries in the map.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get size(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!Sort:class",
          "docComment": "/**\n * Operations for sorting collections.\n *\n * @remarks\n *\n * NOTE: Prior to Node 11.x, the `Array.sort()` algorithm is not guaranteed to be stable. For maximum compatibility, consider using {@link LegacyAdapters.sortStable} instead of `Array.sort()`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Sort "
            }
          ],
          "releaseTag": "Public",
          "name": "Sort",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Sort.compareByValue:member(1)",
              "docComment": "/**\n * Compares `x` and `y` using the JavaScript `>` and `<` operators. This function is suitable for usage as the callback for `array.sort()`.\n *\n * @remarks\n *\n * The JavaScript ordering is generalized so that `undefined` \\< `null` \\< all other values.\n *\n * @returns -1 if `x` is smaller than `y`, 1 if `x` is greater than `y`, or 0 if the values are equal.\n *\n * @example\n * ```ts\n * let array: number[] = [3, 6, 2];\n * array.sort(Sort.compareByValue);  // [2, 3, 6]\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static compareByValue(x: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "compareByValue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Sort.isSorted:member(1)",
              "docComment": "/**\n * Returns true if the array is already sorted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isSorted<T>(array: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ", comparer?: "
                },
                {
                  "kind": "Content",
                  "text": "(x: any, y: any) => number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "comparer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "isSorted"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Sort.isSortedBy:member(1)",
              "docComment": "/**\n * Returns true if the array is already sorted by the specified key.\n *\n * @example\n * ```ts\n * let array: string[] = [ 'a', 'bb', 'ccc' ];\n * Sort.isSortedBy(array, x => x.length); // true\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isSortedBy<T>(array: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ", keySelector: "
                },
                {
                  "kind": "Content",
                  "text": "(element: T) => any"
                },
                {
                  "kind": "Content",
                  "text": ", comparer?: "
                },
                {
                  "kind": "Content",
                  "text": "(x: any, y: any) => number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "keySelector",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "comparer",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "isSortedBy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Sort.sortBy:member(1)",
              "docComment": "/**\n * Sorts the array according to a key which is obtained from the array elements. The result is guaranteed to be a stable sort.\n *\n * @example\n * ```ts\n * let array: string[] = [ 'aaa', 'bb', 'c' ];\n * Sort.sortBy(array, x => x.length);  // [ 'c', 'bb', 'aaa' ]\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static sortBy<T>(array: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ", keySelector: "
                },
                {
                  "kind": "Content",
                  "text": "(element: T) => any"
                },
                {
                  "kind": "Content",
                  "text": ", comparer?: "
                },
                {
                  "kind": "Content",
                  "text": "(x: any, y: any) => number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "array",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "keySelector",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "comparer",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "sortBy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Sort.sortMapKeys:member(1)",
              "docComment": "/**\n * Sorts the entries in a Map object according to the map keys. The result is guaranteed to be a stable sort.\n *\n * @example\n * ```ts\n * let map: Map<string, number> = new Map<string, number>();\n * map.set('zebra', 1);\n * map.set('goose', 2);\n * map.set('aardvark', 3);\n * Sort.sortMapKeys(map);\n * console.log(JSON.stringify(Array.from(map.keys()))); // [\"aardvark\",\"goose\",\"zebra\"]\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static sortMapKeys<K, V>(map: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>"
                },
                {
                  "kind": "Content",
                  "text": ", keyComparer?: "
                },
                {
                  "kind": "Content",
                  "text": "(x: K, y: K) => number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "map",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "keyComparer",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "K",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "V",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "sortMapKeys"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Sort.sortSet:member(1)",
              "docComment": "/**\n * Sorts the entries in a Set object. The result is guaranteed to be a stable sort.\n *\n * @example\n * ```ts\n * let set: Set<string> = new Set<string>();\n * set.add('zebra');\n * set.add('goose');\n * set.add('aardvark');\n * Sort.sortSet(set);\n * console.log(Array.from(set)); // ['aardvark', 'goose', 'zebra']\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static sortSet<T>(set: "
                },
                {
                  "kind": "Reference",
                  "text": "Set",
                  "canonicalReference": "!Set:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ", comparer?: "
                },
                {
                  "kind": "Content",
                  "text": "(x: T, y: T) => number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "set",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "comparer",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "sortSet"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Sort.sortSetBy:member(1)",
              "docComment": "/**\n * Sorts the entries in a Set object according to the specified keys. The result is guaranteed to be a stable sort.\n *\n * @example\n * ```ts\n * let set: Set<string> = new Set<string>();\n * set.add('aaa');\n * set.add('bb');\n * set.add('c');\n * Sort.sortSetBy(set, x => x.length);\n * console.log(Array.from(set)); // ['c', 'bb', 'aaa']\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static sortSetBy<T>(set: "
                },
                {
                  "kind": "Reference",
                  "text": "Set",
                  "canonicalReference": "!Set:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ", keySelector: "
                },
                {
                  "kind": "Content",
                  "text": "(element: T) => any"
                },
                {
                  "kind": "Content",
                  "text": ", keyComparer?: "
                },
                {
                  "kind": "Content",
                  "text": "(x: T, y: T) => number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "set",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "keySelector",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "keyComparer",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "sortSetBy"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!StringBufferTerminalProvider:class",
          "docComment": "/**\n * Terminal provider that stores written data in buffers separated by severity. This terminal provider is designed to be used when code that prints to a terminal is being unit tested.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StringBufferTerminalProvider implements "
            },
            {
              "kind": "Reference",
              "text": "ITerminalProvider",
              "canonicalReference": "@rushstack/node-core-library!ITerminalProvider:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Beta",
          "name": "StringBufferTerminalProvider",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@rushstack/node-core-library!StringBufferTerminalProvider:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `StringBufferTerminalProvider` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(supportsColor?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "supportsColor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!StringBufferTerminalProvider#eolCharacter:member",
              "docComment": "/**\n * This property should return the newline character the terminal provider expects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get eolCharacter(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "eolCharacter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!StringBufferTerminalProvider#getDebugOutput:member(1)",
              "docComment": "/**\n * Get everything that has been written at debug-level severity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDebugOutput(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStringBufferOutputOptions",
                  "canonicalReference": "@rushstack/node-core-library!IStringBufferOutputOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getDebugOutput"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!StringBufferTerminalProvider#getErrorOutput:member(1)",
              "docComment": "/**\n * Get everything that has been written at error-level severity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getErrorOutput(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStringBufferOutputOptions",
                  "canonicalReference": "@rushstack/node-core-library!IStringBufferOutputOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getErrorOutput"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!StringBufferTerminalProvider#getOutput:member(1)",
              "docComment": "/**\n * Get everything that has been written at log-level severity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getOutput(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStringBufferOutputOptions",
                  "canonicalReference": "@rushstack/node-core-library!IStringBufferOutputOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getOutput"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!StringBufferTerminalProvider#getVerbose:member(1)",
              "docComment": "/**\n * Get everything that has been written at verbose-level severity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getVerbose(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStringBufferOutputOptions",
                  "canonicalReference": "@rushstack/node-core-library!IStringBufferOutputOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getVerbose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!StringBufferTerminalProvider#getWarningOutput:member(1)",
              "docComment": "/**\n * Get everything that has been written at warning-level severity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWarningOutput(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "IStringBufferOutputOptions",
                  "canonicalReference": "@rushstack/node-core-library!IStringBufferOutputOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getWarningOutput"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rushstack/node-core-library!StringBufferTerminalProvider#supportsColor:member",
              "docComment": "/**\n * This property should return true only if the terminal provider supports rendering console colors.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get supportsColor(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Beta",
              "name": "supportsColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!StringBufferTerminalProvider#write:member(1)",
              "docComment": "/**\n * This function gets called on every terminal provider upon every message function call on the terminal instance.\n *\n * @param data - The terminal message.\n *\n * @param severity - The message severity. Terminal providers can route different kinds of messages to different streams and may choose to ignore verbose or debug messages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "write(data: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", severity: "
                },
                {
                  "kind": "Reference",
                  "text": "TerminalProviderSeverity",
                  "canonicalReference": "@rushstack/node-core-library!TerminalProviderSeverity:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "severity",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "write"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!StringBuilder:class",
          "docComment": "/**\n * This class allows a large text string to be constructed incrementally by appending small chunks. The final string can be obtained by calling StringBuilder.toString().\n *\n * @remarks\n *\n * A naive approach might use the `+=` operator to append strings: This would have the downside of copying the entire string each time a chunk is appended, resulting in `O(n^2)` bytes of memory being allocated (and later freed by the garbage collector), and many of the allocations could be very large objects. StringBuilder avoids this overhead by accumulating the chunks in an array, and efficiently joining them when `getText()` is finally called.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StringBuilder implements "
            },
            {
              "kind": "Reference",
              "text": "IStringBuilder",
              "canonicalReference": "@rushstack/node-core-library!IStringBuilder:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "StringBuilder",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@rushstack/node-core-library!StringBuilder:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `StringBuilder` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!StringBuilder#append:member(1)",
              "docComment": "/**\n * Append the specified text to the buffer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "append(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "append"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!StringBuilder#toString:member(1)",
              "docComment": "/**\n * Returns a single string containing all the text that was appended to the buffer so far.\n *\n * @remarks\n *\n * This is a potentially expensive operation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toString"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!Terminal:class",
          "docComment": "/**\n * This class facilitates writing to a console.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Terminal implements "
            },
            {
              "kind": "Reference",
              "text": "ITerminal",
              "canonicalReference": "@rushstack/node-core-library!ITerminal:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Beta",
          "name": "Terminal",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@rushstack/node-core-library!Terminal:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Terminal` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(provider: "
                },
                {
                  "kind": "Reference",
                  "text": "ITerminalProvider",
                  "canonicalReference": "@rushstack/node-core-library!ITerminalProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "provider",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Terminal#registerProvider:member(1)",
              "docComment": "/**\n * Subscribe a new terminal provider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "registerProvider(provider: "
                },
                {
                  "kind": "Reference",
                  "text": "ITerminalProvider",
                  "canonicalReference": "@rushstack/node-core-library!ITerminalProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "provider",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "registerProvider"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Terminal#unregisterProvider:member(1)",
              "docComment": "/**\n * Unsubscribe a terminal provider. If the provider isn't subscribed, this function does nothing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unregisterProvider(provider: "
                },
                {
                  "kind": "Reference",
                  "text": "ITerminalProvider",
                  "canonicalReference": "@rushstack/node-core-library!ITerminalProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "provider",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "unregisterProvider"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Terminal#write:member(1)",
              "docComment": "/**\n * Write a generic message to the terminal\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "write(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "write"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Terminal#writeDebug:member(1)",
              "docComment": "/**\n * Write a debug-level message.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeDebug(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeDebug"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Terminal#writeDebugLine:member(1)",
              "docComment": "/**\n * Write a debug-level message followed by a newline.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeDebugLine(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeDebugLine"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Terminal#writeError:member(1)",
              "docComment": "/**\n * Write an error message to the console with red text.\n *\n * @remarks\n *\n * The red color takes precedence over any other foreground colors set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeError(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Terminal#writeErrorLine:member(1)",
              "docComment": "/**\n * Write an error message to the console with red text, followed by a newline.\n *\n * @remarks\n *\n * The red color takes precedence over any other foreground colors set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeErrorLine(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeErrorLine"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Terminal#writeLine:member(1)",
              "docComment": "/**\n * Write a generic message to the terminal, followed by a newline\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeLine(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeLine"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Terminal#writeVerbose:member(1)",
              "docComment": "/**\n * Write a verbose-level message.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeVerbose(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeVerbose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Terminal#writeVerboseLine:member(1)",
              "docComment": "/**\n * Write a verbose-level message followed by a newline.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeVerboseLine(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeVerboseLine"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Terminal#writeWarning:member(1)",
              "docComment": "/**\n * Write a warning message to the console with yellow text.\n *\n * @remarks\n *\n * The yellow color takes precedence over any other foreground colors set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeWarning(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeWarning"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Terminal#writeWarningLine:member(1)",
              "docComment": "/**\n * Write a warning message to the console with yellow text, followed by a newline.\n *\n * @remarks\n *\n * The yellow color takes precedence over any other foreground colors set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeWarningLine(...messageParts: "
                },
                {
                  "kind": "Content",
                  "text": "(string | "
                },
                {
                  "kind": "Reference",
                  "text": "IColorableSequence",
                  "canonicalReference": "@rushstack/node-core-library!IColorableSequence:interface"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Beta",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "messageParts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "writeWarningLine"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@rushstack/node-core-library!TerminalProviderSeverity:enum",
          "docComment": "/**\n * Similar to many popular logging packages, terminal providers support a range of message severities. These severities have built-in formatting defaults in the Terminal object (warnings are yellow, errors are red, etc.).\n *\n * Terminal providers may choose to suppress certain messages based on their severity, or to route some messages to other providers or not based on severity.\n *\n * Severity | Purpose --------- | ------- error | Build errors and fatal issues warning | Not necessarily fatal, but indicate a problem the user should fix log | Informational messages verbose | Additional information that may not always be necessary debug | Highest detail level, best used for troubleshooting information\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum TerminalProviderSeverity "
            }
          ],
          "releaseTag": "Beta",
          "name": "TerminalProviderSeverity",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!TerminalProviderSeverity.debug:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debug = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Beta",
              "name": "debug",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!TerminalProviderSeverity.error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Beta",
              "name": "error",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!TerminalProviderSeverity.log:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "log = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Beta",
              "name": "log",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!TerminalProviderSeverity.verbose:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "verbose = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Beta",
              "name": "verbose",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!TerminalProviderSeverity.warning:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "warning = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Beta",
              "name": "warning",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!Text:class",
          "docComment": "/**\n * Operations for working with strings that contain text.\n *\n * @remarks\n *\n * The utilities provided by this class are intended to be simple, small, and very broadly applicable.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Text "
            }
          ],
          "releaseTag": "Public",
          "name": "Text",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Text.convertTo:member(1)",
              "docComment": "/**\n * Converts all newlines in the provided string to use the specified newline type.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static convertTo(input: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", newlineKind: "
                },
                {
                  "kind": "Reference",
                  "text": "NewlineKind",
                  "canonicalReference": "@rushstack/node-core-library!NewlineKind:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "newlineKind",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "convertTo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Text.convertToCrLf:member(1)",
              "docComment": "/**\n * Converts all newlines in the provided string to use Windows-style CRLF end of line characters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static convertToCrLf(input: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "convertToCrLf"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Text.convertToLf:member(1)",
              "docComment": "/**\n * Converts all newlines in the provided string to use POSIX-style LF end of line characters.\n *\n * POSIX is a registered trademark of the Institute of Electrical and Electronic Engineers, Inc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static convertToLf(input: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "convertToLf"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Text.ensureTrailingNewline:member(1)",
              "docComment": "/**\n * Returns the input string with a trailing `\\n` character appended, if not already present.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static ensureTrailingNewline(s: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", newlineKind?: "
                },
                {
                  "kind": "Reference",
                  "text": "NewlineKind",
                  "canonicalReference": "@rushstack/node-core-library!NewlineKind:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "s",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "newlineKind",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "ensureTrailingNewline"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Text.getNewline:member(1)",
              "docComment": "/**\n * Returns the newline character sequence for the specified `NewlineKind`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getNewline(newlineKind: "
                },
                {
                  "kind": "Reference",
                  "text": "NewlineKind",
                  "canonicalReference": "@rushstack/node-core-library!NewlineKind:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newlineKind",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getNewline"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Text.padEnd:member(1)",
              "docComment": "/**\n * Append characters to the end of a string to ensure the result has a minimum length.\n *\n * @remarks\n *\n * If the string length already exceeds the minimum length, then the string is unchanged. The string is not truncated.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static padEnd(s: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", minimumLength: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", paddingCharacter?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "s",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "minimumLength",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "paddingCharacter",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "padEnd"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Text.padStart:member(1)",
              "docComment": "/**\n * Append characters to the start of a string to ensure the result has a minimum length.\n *\n * @remarks\n *\n * If the string length already exceeds the minimum length, then the string is unchanged. The string is not truncated.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static padStart(s: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", minimumLength: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", paddingCharacter?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "s",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "minimumLength",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "paddingCharacter",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "padStart"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Text.replaceAll:member(1)",
              "docComment": "/**\n * Returns the same thing as targetString.replace(searchValue, replaceValue), except that all matches are replaced, rather than just the first match.\n *\n * @param input - The string to be modified\n *\n * @param searchValue - The value to search for\n *\n * @param replaceValue - The replacement text\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static replaceAll(input: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", searchValue: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", replaceValue: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "searchValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "replaceValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "replaceAll"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!Text.truncateWithEllipsis:member(1)",
              "docComment": "/**\n * If the string is longer than maximumLength characters, truncate it to that length using \"...\" to indicate the truncation.\n *\n * @remarks\n *\n * For example truncateWithEllipsis('1234578', 5) would produce '12...'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static truncateWithEllipsis(s: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", maximumLength: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "s",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "maximumLength",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "truncateWithEllipsis"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@rushstack/node-core-library!TextAttribute:enum",
          "docComment": "/**\n * Text styles used with {@link IColorableSequence}.\n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum TextAttribute "
            }
          ],
          "releaseTag": "Beta",
          "name": "TextAttribute",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!TextAttribute.Blink:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Blink = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Beta",
              "name": "Blink",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!TextAttribute.Bold:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Bold = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Beta",
              "name": "Bold",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!TextAttribute.Dim:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Dim = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Beta",
              "name": "Dim",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!TextAttribute.Hidden:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Hidden = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Beta",
              "name": "Hidden",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!TextAttribute.InvertColor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvertColor = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Beta",
              "name": "InvertColor",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rushstack/node-core-library!TextAttribute.Underline:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Underline = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Beta",
              "name": "Underline",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@rushstack/node-core-library!TypeUuid:class",
          "docComment": "/**\n * Provides a version-independent implementation of the JavaScript `instanceof` operator.\n *\n * @remarks\n *\n * The JavaScript `instanceof` operator normally only identifies objects from a particular library instance. For example, suppose the NPM package `example-lib` has two published versions 1.2.0 and 1.3.0, and it exports a class called `A`. Suppose some code consumes version `1.3.0` of the library, but it receives an object that was constructed using version `1.2.0`. In this situation `a instanceof A` will return `false`, even though `a` is an instance of `A`. The reason is that there are two prototypes for `A`; one for each version.\n *\n * The `TypeUuid` facility provides a way to make `a instanceof A` return true for both prototypes of `A`, by instead using a universally unique identifier (UUID) to detect object instances.\n *\n * You can use `Symbol.hasInstance` to enable the system `instanceof` operator to recognize type UUID equivalence:\n * ```ts\n * const uuidWidget: string = '9c340ef0-d29f-4e2e-a09f-42bacc59024b';\n * class Widget {\n *   public static [Symbol.hasInstance](instance: object): boolean {\n *     return TypeUuid.isInstanceOf(instance, uuidWidget);\n *   }\n * }\n * ```\n *\n * // Example usage:\n * ```ts\n * import { Widget as Widget1 } from 'v1-of-library';\n * import { Widget as Widget2 } from 'v2-of-library';\n * const widget = new Widget2();\n * console.log(widget instanceof Widget1); // prints true\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TypeUuid "
            }
          ],
          "releaseTag": "Public",
          "name": "TypeUuid",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!TypeUuid.isInstanceOf:member(1)",
              "docComment": "/**\n * Returns true if the `targetObject` is an instance of a JavaScript class that was previously registered using the specified `typeUuid`. Base classes are also considered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isInstanceOf(targetObject: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ", typeUuid: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "targetObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "typeUuid",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "isInstanceOf"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rushstack/node-core-library!TypeUuid.registerClass:member(1)",
              "docComment": "/**\n * Registers a JavaScript class as having a type identified by the specified UUID.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static registerClass(targetClass: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", typeUuid: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "targetClass",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "typeUuid",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "registerClass"
            }
          ],
          "implementsTokenRanges": []
        }
      ]
    }
  ]
}
